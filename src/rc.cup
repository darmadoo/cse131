
import java_cup.runtime.*;
import java.util.Vector;

//--------------------------------------------------------------------
// CSE 131 Reduced-C Compiler Project
// Copyright (C) 2008-2015 Garo Bournoutian and Rick Ord
// University of California, San Diego
//--------------------------------------------------------------------

parser code 
{:
:};

scan with {: return new Symbol (sym.EOF); :};

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

terminal
    T_AMPERSAND,
    T_AND,
    T_ARROW,
    T_ASSIGN,
    T_AUTO,
    T_BAR,
    T_BOOL,
    T_BREAK,
    T_CARET,
    T_CIN,
    T_COLON,
    T_COLONCOLON,
    T_COMMA,
    T_CONST,
    T_CONTINUE,
    T_COUT,
    T_DOT,
    T_ELSE,
    T_ENDL,
    T_EQU,
    T_EXIT,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FOREACH,
    T_FUNCTION,
    T_GT,
    T_GTE,
    T_IF,
    T_INT,
    T_ISTREAM,
    T_LBRACE,
    T_LBRACKET,
    T_LPAREN,
    T_LT,
    T_LTE,
    T_MINUS,
    T_MINUSMINUS,
    T_MOD,
    T_NEQ,
    T_NOT,
    T_NULLPTR,
    T_OR,
    T_OSTREAM,
    T_PLUS,
    T_PLUSPLUS,
    T_RBRACE,
    T_RBRACKET,
    T_RETURN,
    T_RPAREN,
    T_SEMI,
    T_SIZEOF,
    T_SLASH,
    T_STAR,
    T_STATIC,
    T_STRUCTDEF,
    T_THIS,
    T_TILDE,
    T_TRUE,
    T_WHILE,
    T_VOID,
    T_NEW,
    T_DELETE
    ;

terminal String
    T_FLOAT_LITERAL,
    T_INT_LITERAL,
    T_STR_LITERAL,
    T_ID_U,
    T_ID
    ;


//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

non terminal    
    Program,
    OptGlobalDecls,
    GlobalDecls,
    GlobalDecl,
    FuncDef,
    FuncDecl,
    ExternDecl,
    VarDecl,
    ConstDecl,
    StructdefDecl,
    CtorDtorDecl,
    OptStmtList,
    StmtList,
    Stmt,
    CodeBlock,
    IfStmt,
    OptElse,
    ForeachStmt,
    WhileStmt,
    BreakStmt,
    ContinueStmt,
    ExitStmt,
    ReturnStmt,
    ReadStmt,
    WriteStmt,
    WritePairList,
    WritePair,
    UnarySign,
    Equality,
    Relation,
    OptInit,
    NewStmt,
    DeleteStmt
    ;

non terminal String    
    AddOp,
    MulOp,
    IncDecOp,
    OptRef,
    OptStatic,
    Pointer
    ;

non terminal STO
    Expr,
    Expr0,
    Expr1,
    Expr2,
    Expr3,
    Expr4,
    Expr5,
    Expr6,
    Expr7,
    Expr8,
    Designator,
    Designator2,
    Designator3,
    ParamDecl,
    Array,
    ConstExpr,
    CtorDef,
    DtorDef,
    FieldFuncDecl,
    FieldVarDecl
    ;

non terminal Type
    BasicType,
    DecoratedBasicType,
    StructType,
    Type,
    DecoratedType,
    ReturnType
    ;

non terminal Vector
    OptParamList,
    ParamList,
    OptExprList,
    ExprList,
    OptArrayList,
    ArrayList,
    OptPointerList,
    PointerList,
    FieldVarsList,
    FieldFuncsList,
    OptCtorDtorList,
    CtorDtorList,
    OptCtorCall,
    CtorCall,
    OptFieldFuncsList
    ;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

Program ::=         {:
                        ((MyParser) parser).DoProgramStart(); 
                    :}
                    OptGlobalDecls
                    {:
                        ((MyParser) parser).DoProgramEnd();
                    :}
    ;


OptGlobalDecls ::=  GlobalDecls
    |               /* empty */
    ;


GlobalDecls ::=     GlobalDecl
    |               GlobalDecls GlobalDecl
    ;


GlobalDecl ::=      ExternDecl
    |               VarDecl
    |               ConstDecl
    |               StructdefDecl
    |               FuncDecl
    |               FuncDef
    ;


ExternDecl ::=      T_EXTERN DecoratedBasicType:_2 T_ID:_3 OptArrayList:_4
                    {:
                        ((MyParser) parser).DoExternDecl (_3);
                    :}
                    T_SEMI
    ;


VarDecl ::=         OptStatic:_1 DecoratedType:_2 T_ID:_3 OptArrayList:_4 OptInit:_5
                    {:
                        if(_1 == "STATIC"){
                            ((MyParser) parser).isStatic(true);
                        }
                        else{
                            ((MyParser) parser).isStatic(false);
                        }
                        ((MyParser) parser).DoVarDecl (_3, _2, (STO) _5, _4, "");
                    :}
                    T_SEMI
    |               OptStatic:_1 T_AUTO T_ID:_3 T_ASSIGN Expr:_5
                    {:
                        ((MyParser) parser).DoAutoDecl ( _3, (STO) _5);
                    :}
                    T_SEMI
    |               OptStatic:_1 StructType:_2 T_ID:_3 OptArrayList:_4 OptCtorCall:_5
                    {:
                        ((MyParser) parser).DoVarDecl (_3, _2, _5);
                    :}
                    T_SEMI
    ;


ConstDecl ::=       OptStatic:_1 T_CONST BasicType:_2 T_ID:_3 T_ASSIGN ConstExpr:_5
                    {:
                        if(_1 == "STATIC"){
                            ((MyParser) parser).isStatic(true);
                        }
                        else{
                            ((MyParser) parser).isStatic(false);
                        }

                        ((MyParser) parser).DoConstDecl (_3, _2, (STO) _5);
                    :}
                    T_SEMI
    |               OptStatic:_1 T_CONST T_AUTO T_ID:_3 T_ASSIGN ConstExpr:_5
                    {:
                        ((MyParser) parser).DoAutoConstDecl (_3, (STO) _5);
                    :}
                    T_SEMI
    ;


OptStatic ::=       T_STATIC:_1
                    {:
                        RESULT = "STATIC";
                    :}
    |               /* empty */
                    {:
                        RESULT = "NOTSTATIC";
                    :}
    ;



StructdefDecl ::=   T_STRUCTDEF T_ID_U:_1 T_LBRACE
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).SetStructFlagAndLoad(_1);
                    :}
                    FieldVarsList:_2
                    OptCtorDtorList:_3
                    {:
                        // Put logic here to create default ctor if needed
                        _3 = ((MyParser) parser).CtorCheck(_3, _1);
                        ((MyParser) parser).setRecursiveFuncTrue();
                    :}
                    OptFieldFuncsList:_4
                    {:
                        ((MyParser) parser).DoBlockClose();
                        ((MyParser) parser).setRecursiveFuncFalse();
                        ((MyParser) parser).ResetStruct();
                        ((MyParser) parser).DoStructdefDecl (_1, _2, _4, _3);
                    :}
                    T_RBRACE T_SEMI
    ;


FieldVarsList ::=   FieldVarDecl:_1
                    {:
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    :}
    |               FieldVarsList:_1 FieldVarDecl:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;


FieldVarDecl ::=    DecoratedType:_1 T_ID:_3 OptArrayList:_4 T_SEMI
                    {:
                        VarSTO temp = ((MyParser) parser).VarTypeDec(_1, _3, _4);
                        ((MyParser) parser).DoDuplicateVarCheck(temp);
                        RESULT = temp;
                    :}
    ;


OptCtorDtorList ::= CtorDtorList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;


CtorDtorList ::=    CtorDtorDecl:_1
                    {:
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    :}
    |               CtorDtorList:_1 CtorDtorDecl:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;


CtorDtorDecl ::=    CtorDef:_1
                    {:
                        RESULT = _1;
                    :}
    |               DtorDef:_1
                    {:
                        RESULT = _1;
                    :}
    ;


CtorDef ::=         T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                    :}
                    T_LBRACE OptStmtList T_RBRACE
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                        RESULT = ((MyParser) parser).DoCtorDtorCheck();
                    :}
    ;


DtorDef ::=         T_TILDE T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1("~" + _3);
                        ((MyParser) parser).DoFormalParams(new Vector());
                    :}
                    T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                        RESULT = ((MyParser) parser).DoCtorDtorCheck();
                    :}
    ;


OptFieldFuncsList ::= FieldFuncsList:_1
                      {:
                           RESULT = _1;
                      :}
    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;


FieldFuncsList ::=  FieldFuncDecl:_1
                    {:
                        RESULT = new Vector();
                        RESULT.addElement(((MyParser) parser).getStruct());
                    :}
    |               FieldFuncsList:_1 FieldFuncDecl:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (((MyParser) parser).getStruct());
                    :}
    ;


FieldFuncDecl ::=   FuncDef
    ;


FuncDef ::=         T_FUNCTION T_COLON ReturnType:_1 OptRef:_2 T_ID:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3, _1, _2);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                    :}
                    T_LBRACE OptStmtList
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
                    T_RBRACE
    ;


FuncDecl ::=        T_EXTERN T_FUNCTION T_COLON ReturnType:_1 T_ID:_3
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_3, _1);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
                    T_SEMI
    ;


Type ::=            DecoratedType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1
                    {:
                        RESULT = _1;
                    :}
    ;


DecoratedType ::=   DecoratedBasicType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1 PointerList:_2
                    {:
                        if(_2 == null)
                        {
                            RESULT = _1;    // gotta do something here!
                        }
                        else
                        {
                            RESULT = ((MyParser) parser).DoPointerType (_1, _2);
                        }
                    :}
    ;


DecoratedBasicType ::= BasicType:_1 OptPointerList:_2
                    {:
                        if(_2 == null)
                        {
                            RESULT = _1;    // gotta do something here!
                        }
                        else
                        {
                            RESULT = ((MyParser) parser).DoPointerType (_1, _2);
                        }
                    :}
    ;


BasicType ::=       T_INT
                    {:
                        RESULT = new IntType();
                    :}
    |               T_FLOAT
                    {:
                        RESULT = new FloatType();
                    :}
    |               T_BOOL
                    {:
                        RESULT = new BoolType();
                    :}
    ;


StructType ::=      T_ID_U:_1
                    {:
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    :}
    ;


ReturnType ::=      Type:_1
                    {:
                        RESULT = _1;
                    :}
    |               T_VOID
                    {:
                        RESULT = new VoidType();
                    :}
    ;


OptPointerList ::=  PointerList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;

PointerList ::=     Pointer:_1
                    {:
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    :}
    |               PointerList:_1 Pointer:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;


Pointer ::=         T_STAR
                    {:
                        RESULT = "*";
                    :}
    ;


OptArrayList ::=    ArrayList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;

ArrayList ::=       Array:_1
                    {:
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    :}
    |               ArrayList:_1 Array:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;

Array ::=           T_LBRACKET ConstExpr:_1 T_RBRACKET
                    {:
                        RESULT = _1;
                    :}
    ;


CodeBlock ::=       T_LBRACE
                    {: ((MyParser) parser).DoBlockOpen(); :}
                    OptStmtList
                    {: ((MyParser) parser).DoBlockClose(); :}
                    T_RBRACE
    ;


OptStmtList ::=     StmtList
    |               /* empty */
    ;


StmtList ::=        Stmt
    |               StmtList Stmt
    ;


Stmt ::=            VarDecl
    |               ConstDecl
    |               CodeBlock
    |               Expr T_SEMI
    |               IfStmt
    |               WhileStmt
    |               ForeachStmt
    |               BreakStmt
    |               ContinueStmt
    |               ExitStmt
    |               ReturnStmt
    |               ReadStmt
    |               WriteStmt
    |               NewStmt
    |               DeleteStmt
    ;


OptParamList ::=    ParamList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;


ParamList ::=       ParamDecl:_2
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    :}
    |               ParamList:_1 T_COMMA ParamDecl:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;


ParamDecl ::=       Type:_1 OptRef:_2 T_ID:_3 OptArrayList:_4
                    {:
                        VarSTO temp;
                        if(_4 == null)
                        {
                            temp = new VarSTO(_3, _1);
                        }
                        else
                        {
                            temp = ((MyParser) parser).DoDeclArray(_3, _1, _4);
                        }

                        if(_2 == "&"){
                            ((VarSTO)temp).setPbr(true);
                        }
                        else{
                            ((VarSTO)temp).setPbr(false);
                        }

                        RESULT = temp;
                    :}
    ;


OptRef ::=          T_AMPERSAND
                    {:
                        RESULT = "&";
                    :}
    |               /* empty */
                    {:
                        RESULT = "";
                    :}
    ;


OptInit ::=         T_ASSIGN Expr:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;


OptCtorCall ::=     CtorCall:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;


CtorCall ::=        T_COLON T_LPAREN OptExprList:_1 T_RPAREN
                    {:
                        RESULT = _1;
                    :}
    ;


IfStmt ::=          T_IF Expr:_1 CodeBlock OptElse
                    {:
                        RESULT = ((MyParser) parser).DoBoolCheck(_1);
                    :}
    ;


OptElse ::=         T_ELSE CodeBlock
    |               /* empty */
    ;


WhileStmt ::=       T_WHILE Expr:_1
                    {:
                        ((MyParser) parser).incrementBreakCounter();
                        RESULT = ((MyParser) parser).DoBoolCheck(_1);
                    :}
                    CodeBlock
                    {:
                        ((MyParser) parser).decrementBreakCounter();
                    :}
    ;


ForeachStmt ::=     T_FOREACH T_LPAREN Type:_1 OptRef:_4 T_ID:_2 T_COLON Expr:_3 T_RPAREN
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).incrementBreakCounter();
                        ((MyParser) parser).DoForEachVarDecl (_2, _1, _3, _4);
                    :}
                    CodeBlock
                    {:
                        ((MyParser) parser).decrementBreakCounter();
                        ((MyParser) parser).DoBlockClose();
                    :}
    ;


BreakStmt ::=       T_BREAK T_SEMI
                    {:
                        ((MyParser) parser).DoBreakCheck();
                    :}
    ;


ContinueStmt ::=    T_CONTINUE T_SEMI
                    {:
                        ((MyParser) parser).DoContinueCheck();
                    :}
    ;


ExitStmt ::=        T_EXIT T_LPAREN Expr:_1 T_RPAREN T_SEMI
                    {:
                        RESULT = ((MyParser) parser).DoExitCheck(_1);
                    :}
    ;


ReturnStmt ::=      T_RETURN T_SEMI
                    {:
                        RESULT = ((MyParser) parser).DoReturnCheck();
                    :}
    |               T_RETURN Expr:_1 T_SEMI
                    {:
                        RESULT = ((MyParser) parser).DoReturnCheck(_1);
                    :}
    ;


ReadStmt ::=        T_CIN T_ISTREAM Designator T_SEMI
    ;


WriteStmt ::=       T_COUT T_OSTREAM WritePairList:_1 T_SEMI
    ;


WritePairList ::=   WritePair
    |               WritePairList T_OSTREAM WritePair
    ;


WritePair ::=       Expr:_1
                    {:
                        //System.out.println(_1.getName());
                        //System.out.println(_1);
                        ((MyParser) parser).DoCout(_1);
                    :}
    |               T_ENDL
                    {:
                        ((MyParser) parser).DoEndlCout();
                    :}
    ;


ConstExpr ::=       Expr:_1
                    {:
                        RESULT = _1;
                    :}
    ;


OptExprList ::=     ExprList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
                    {:
                        RESULT = new Vector();
                    :}
    ;


ExprList ::=        Expr:_2
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    :}
    |               ExprList:_1 T_COMMA Expr:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}
    ;


Expr ::=            Designator:_1 T_ASSIGN Expr:_2
                    {:
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                    :}
    |               Expr0:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr0 ::=           Expr0:_1 T_OR Expr1:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new OrOp(), _3);
                    :}
    |               Expr1:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr1 ::=           Expr1:_1 T_AND Expr2:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AndOp(), _3);
                    :}
    |               Expr2:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr2 ::=           Expr2:_1 T_BAR Expr3:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BarOp(), _3);
                    :}
    |               Expr3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr3 ::=           Expr3:_1 T_CARET Expr4:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new CaretOp(), _3);
                    :}
    |               Expr4:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr4 ::=           Expr4:_1 T_AMPERSAND Expr5:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AmpersandOp(), _3);
                    :}
    |               Expr5:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr5 ::=           Expr5:_1 Equality:_2 Expr6:_3
                    {:
                      if(_2 == "==")
                      {
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new EqualOp(), _3);
                      }
                      else{
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new NotEqualOp(), _3);
                      }
                    :}
    |               Expr6:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr6 ::=           Expr6:_1 Relation:_2 Expr7:_3
                    {:
                      if(_2 == "<")
                      {
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new LessThanOp(), _3);
                      }
                      else if(_2 == "<="){
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new LessThanEqualOp(), _3);
                      }
                      else if(_2 == ">"){
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new GreaterThanOp(), _3);
                      }
                      else{
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new GreaterThanEqualOp(), _3);
                      }
                    :}
    |               Expr7:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr7 ::=           Expr7:_1 AddOp:_2 Expr8:_3
                    {:
                      if(_2 == "+"){
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AddOp(), _3);
                      }
                      else{
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new MinusOp(), _3);
                      }
                    :}
    |               Expr8:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr8 ::=           Expr8:_1 MulOp:_2 Designator:_3
                    {:
                      if(_2 == "*")
                      {
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new StarOp(), _3);
                      }
                      else if(_2 == "%"){
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new ModOp(), _3);
                      }
                      else{
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new SlashOp(), _3);
                      }
                    :}
    |               Designator:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Equality ::=        T_EQU
                    {:
                        RESULT = "==";
                    :}
    |               T_NEQ
                    {:
                        RESULT = "!=";
                    :}
    ;


Relation ::=        T_LT
                    {:
                        RESULT = "<";
                    :}
    |               T_GT
                    {:
                        RESULT = ">";
                    :}
    |               T_LTE
                    {:
                        RESULT = "<=";
                    :}
    |               T_GTE
                    {:
                        RESULT = ">=";
                    :}
    ;


AddOp ::=           T_PLUS
                    {:
                        RESULT = "+";
                    :}
    |               T_MINUS
                    {:
                        RESULT = "-";
                    :}
    ;


MulOp ::=           T_STAR
                    {:
                        RESULT = "*";
                    :}
    |               T_SLASH
                    {:
                        RESULT = "/";
                    :}
    |               T_MOD
                    {:
                        RESULT = "%";
                    :}
    ;


IncDecOp ::=        T_PLUSPLUS
                    {:
                        RESULT = "++";
                    :}
    |               T_MINUSMINUS
                    {:
                        RESULT = "--";
                    :}
    ;


Designator ::=      T_STAR Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoStarCheck (_1);
                    :}
    |               T_AMPERSAND Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoAmpersand (_1);
                    :}
    |               UnarySign Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoUnaryExpr (_1, new MinusUnaryOp());
                    :}
    |               T_NOT Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoUnaryExpr (_1, new NotOp());
                    :}
    |               T_SIZEOF T_LPAREN Designator:_2 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoSizeCheck (_2);
                    :}
    |               T_SIZEOF T_LPAREN Type:_2 OptArrayList:_1 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoSizeCheck (_2, _1);
                    :}
    |               T_LPAREN DecoratedType:_1 T_RPAREN Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoTypeCast (_1, _2);
                    :}
    |               IncDecOp:_1 Designator:_2
                    {:
                      if(_1 == "++")
                      {
                        RESULT = ((MyParser) parser).DoUnaryExpr (_2, new IncOp());
                      }
                      else{
                        RESULT = ((MyParser) parser).DoUnaryExpr (_2, new DecOp());
                      }
                    :}
    |               Designator2:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


Designator2 ::=     Designator2:_1 T_DOT T_ID:_3
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    :}
    |               Designator2:_1 T_LBRACKET Expr:_2 T_RBRACKET
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Arrays (_1, _2);
                    :}
    |               Designator2:_1 T_ARROW T_ID:_2
                    {:
                        RESULT = ((MyParser) parser).DoArrowCheck (_1, _2);;
                    :}
    |               Designator2:_1 IncDecOp:_2
                    {:
                        if(_2 == "++")
                        {
                          RESULT = ((MyParser) parser).DoUnaryExpr (_1, new IncOp());
                        }
                        else{
                          RESULT = ((MyParser) parser).DoUnaryExpr (_1, new DecOp());
                    }
                    :}
    |               Designator2:_1 T_LPAREN OptExprList:_2 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                    :}
    |               Designator3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Designator3 ::=     T_LPAREN Expr:_2 T_RPAREN
                    {:
                        RESULT = _2;
                    :}
    |               T_INT_LITERAL:_1
                    {:
                        ConstSTO sto = new ConstSTO (_1, new IntType(), Integer.parseInt(_1, 10));
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    :}
    |               T_FLOAT_LITERAL:_1
                    {:
                        ConstSTO sto = new ConstSTO (_1, new FloatType(), Float.parseFloat(_1));
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    :}
    |               T_STR_LITERAL:_1
                    {:
                        ConstSTO sto = new ConstSTO (_1);
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    :}
    |               T_TRUE
                    {:
                        ConstSTO sto = new ConstSTO ("true", new BoolType(), 1);
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    :}
    |               T_FALSE
                    {:
                        ConstSTO sto = new ConstSTO ("false", new BoolType(), 0);
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    :}
    |               T_NULLPTR
                    {:
                        RESULT = new ExprSTO ("nullptr", new NullPointerType("nullptr", 4));
                    :}
    |               T_THIS
                    {:
                        RESULT = new ExprSTO ("this", new StructType("this"));
                    :}
    |               T_COLONCOLON T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    :}
    |               T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    :}
    ;

NewStmt ::=         T_NEW Designator:_1 OptCtorCall:_2 T_SEMI
                    {:
                        ((MyParser) parser).DoNewStatement(_1, _2);

                    :}
    ;

DeleteStmt ::=      T_DELETE Designator:_1 T_SEMI
                    {:
                        ((MyParser) parser).DoDeleteStatement(_1);

                    :}
    ;

UnarySign ::=       T_PLUS
                    {:
                        RESULT = "+";
                    :}
    |               T_MINUS
                    {:
                        RESULT = "-";
                    :}
    ;
