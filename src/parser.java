
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
<<<<<<< HEAD
// Fri Dec 04 19:47:30 PST 2015
=======
// Fri Dec 04 18:36:37 PST 2015
>>>>>>> cf2a193755938e8462520f66ef5ef6b3ed5e8b48
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
<<<<<<< HEAD
  * @version Fri Dec 04 19:47:30 PST 2015
=======
  * @version Fri Dec 04 18:36:37 PST 2015
>>>>>>> cf2a193755938e8462520f66ef5ef6b3ed5e8b48
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\314\000\002\123\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\124\002\000\002\011\010\000\002\125" +
    "\002\000\002\012\011\000\002\126\002\000\002\012\011" +
    "\000\002\127\002\000\002\012\011\000\002\130\002\000" +
    "\002\013\012\000\002\131\002\000\002\013\012\000\002" +
    "\050\003\000\002\050\002\000\002\132\002\000\002\133" +
    "\002\000\002\134\002\000\002\014\015\000\002\114\003" +
    "\000\002\114\004\000\002\075\006\000\002\116\003\000" +
    "\002\116\002\000\002\117\003\000\002\117\004\000\002" +
    "\015\003\000\002\015\003\000\002\135\002\000\002\136" +
    "\002\000\002\072\013\000\002\137\002\000\002\073\012" +
    "\000\002\122\003\000\002\122\002\000\002\115\003\000" +
    "\002\115\004\000\002\074\003\000\002\140\002\000\002" +
    "\141\002\000\002\142\002\000\002\007\020\000\002\143" +
    "\002\000\002\144\002\000\002\010\015\000\002\101\003" +
    "\000\002\101\003\000\002\102\003\000\002\102\004\000" +
    "\002\077\004\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\100\003\000\002\103\003\000\002\103" +
    "\003\000\002\112\003\000\002\112\002\000\002\113\003" +
    "\000\002\113\004\000\002\051\003\000\002\110\003\000" +
    "\002\110\002\000\002\111\003\000\002\111\004\000\002" +
    "\070\005\000\002\145\002\000\002\146\002\000\002\021" +
    "\007\000\002\016\003\000\002\016\002\000\002\017\003" +
    "\000\002\017\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\104\003\000\002\104\002\000\002\105\003\000\002" +
    "\105\005\000\002\067\006\000\002\047\003\000\002\047" +
    "\002\000\002\041\004\000\002\041\002\000\002\120\003" +
    "\000\002\120\002\000\002\121\006\000\002\147\002\000" +
    "\002\150\002\000\002\151\002\000\002\022\011\000\002" +
    "\023\004\000\002\023\002\000\002\152\002\000\002\153" +
    "\002\000\002\025\007\000\002\154\002\000\002\155\002" +
    "\000\002\024\015\000\002\026\004\000\002\027\004\000" +
    "\002\030\007\000\002\031\004\000\002\031\005\000\002" +
    "\032\006\000\002\033\006\000\002\034\003\000\002\034" +
    "\005\000\002\035\003\000\002\035\003\000\002\071\003" +
    "\000\002\106\003\000\002\106\002\000\002\107\003\000" +
    "\002\107\005\000\002\052\005\000\002\052\003\000\002" +
    "\156\002\000\002\053\006\000\002\053\003\000\002\157" +
    "\002\000\002\054\006\000\002\054\003\000\002\055\005" +
    "\000\002\055\003\000\002\056\005\000\002\056\003\000" +
    "\002\057\005\000\002\057\003\000\002\060\005\000\002" +
    "\060\003\000\002\061\005\000\002\061\003\000\002\062" +
    "\005\000\002\062\003\000\002\063\005\000\002\063\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\044\003\000\002\044\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\046\003\000\002\046\003" +
    "\000\002\064\004\000\002\064\004\000\002\064\004\000" +
    "\002\064\004\000\002\064\006\000\002\064\007\000\002" +
    "\064\006\000\002\064\004\000\002\064\003\000\002\065" +
    "\005\000\002\065\006\000\002\065\005\000\002\065\004" +
    "\000\002\065\006\000\002\065\003\000\002\066\005\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\004\000\002\066\003\000\002\042\006" +
    "\000\002\043\005\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\030\002\001\010\001\012\001\021\001\032" +
    "\001\034\001\040\001\071\001\072\001\105\001\106\001" +
    "\001\002\000\004\002\u0157\001\002\000\030\002\ufffd\010" +
    "\uffe7\012\uffe7\021\uffe7\032\uffe7\034\011\040\uffe7\071\015" +
    "\072\012\105\uffe7\106\007\001\002\000\030\002\ufff6\010" +
    "\ufff6\012\ufff6\021\ufff6\032\ufff6\034\ufff6\040\ufff6\071\ufff6" +
    "\072\ufff6\105\ufff6\106\ufff6\001\002\000\012\012\032\032" +
    "\035\034\u0148\040\036\001\002\000\030\002\ufff7\010\ufff7" +
    "\012\ufff7\021\ufff7\032\ufff7\034\ufff7\040\ufff7\071\ufff7\072" +
    "\ufff7\105\ufff7\106\ufff7\001\002\000\004\016\u0139\001\002" +
    "\000\004\105\263\001\002\000\016\010\030\012\032\021" +
    "\034\032\035\040\036\105\031\001\002\000\030\002\ufff9" +
    "\010\ufff9\012\ufff9\021\ufff9\032\ufff9\034\ufff9\040\ufff9\071" +
    "\ufff9\072\ufff9\105\ufff9\106\ufff9\001\002\000\016\010\uffe8" +
    "\012\uffe8\021\uffe8\032\uffe8\040\uffe8\105\uffe8\001\002\000" +
    "\030\002\ufffc\010\ufffc\012\ufffc\021\ufffc\032\ufffc\034\ufffc" +
    "\040\ufffc\071\ufffc\072\ufffc\105\ufffc\106\ufffc\001\002\000" +
    "\030\002\ufff5\010\ufff5\012\ufff5\021\ufff5\032\ufff5\034\ufff5" +
    "\040\ufff5\071\ufff5\072\ufff5\105\ufff5\106\ufff5\001\002\000" +
    "\030\002\ufffe\010\uffe7\012\uffe7\021\uffe7\032\uffe7\034\011" +
    "\040\uffe7\071\015\072\012\105\uffe7\106\007\001\002\000" +
    "\030\002\ufffa\010\ufffa\012\ufffa\021\ufffa\032\ufffa\034\ufffa" +
    "\040\ufffa\071\ufffa\072\ufffa\105\ufffa\106\ufffa\001\002\000" +
    "\004\002\000\001\002\000\030\002\ufff8\010\ufff8\012\ufff8" +
    "\021\ufff8\032\ufff8\034\ufff8\040\ufff8\071\ufff8\072\ufff8\105" +
    "\ufff8\106\ufff8\001\002\000\030\002\ufffb\010\ufffb\012\ufffb" +
    "\021\ufffb\032\ufffb\034\ufffb\040\ufffb\071\ufffb\072\ufffb\105" +
    "\ufffb\106\ufffb\001\002\000\012\004\uffc6\043\uffc6\064\uffc6" +
    "\107\uffc6\001\002\000\014\004\uffbc\043\uffbc\064\uffbc\070" +
    "\116\107\uffbc\001\002\000\004\107\252\001\002\000\004" +
    "\107\245\001\002\000\014\004\uffc0\043\uffc0\064\uffc0\070" +
    "\uffc0\107\uffc0\001\002\000\014\004\uffc1\043\uffc1\064\uffc1" +
    "\070\uffc1\107\uffc1\001\002\000\006\070\116\107\233\001" +
    "\002\000\012\010\040\012\032\032\035\040\036\001\002" +
    "\000\014\004\uffc2\043\uffc2\064\uffc2\070\uffc2\107\uffc2\001" +
    "\002\000\014\004\uffc3\043\uffc3\064\uffc3\070\uffc3\107\uffc3" +
    "\001\002\000\004\107\226\001\002\000\004\107\041\001" +
    "\002\000\004\007\042\001\002\000\046\004\073\017\102" +
    "\031\067\044\075\047\066\050\076\053\063\054\103\057" +
    "\100\060\065\066\071\070\104\073\062\075\054\102\101" +
    "\103\064\104\046\107\072\001\002\000\060\004\uff60\005" +
    "\uff60\007\224\011\uff60\014\uff60\020\uff60\027\uff60\035\uff60" +
    "\036\uff60\042\uff60\045\uff60\046\uff60\047\uff60\051\uff60\052" +
    "\uff60\055\uff60\056\uff60\057\uff60\062\uff60\064\uff60\065\uff60" +
    "\067\uff60\070\uff60\001\002\000\056\004\uff62\005\uff62\011" +
    "\uff62\014\uff62\020\uff62\027\uff62\035\uff62\036\uff62\042\uff62" +
    "\045\uff62\046\uff62\047\uff62\051\176\052\uff62\055\uff62\056" +
    "\uff62\057\uff62\062\uff62\064\uff62\065\uff62\067\200\070\177" +
    "\001\002\000\050\004\uff64\005\uff64\011\uff64\014\uff64\020" +
    "\uff64\027\uff64\035\uff64\036\uff64\042\uff64\045\uff64\046\uff64" +
    "\047\173\052\uff64\055\uff64\056\uff64\057\172\062\uff64\064" +
    "\uff64\065\uff64\001\002\000\076\004\uff40\005\uff40\006\uff40" +
    "\007\uff40\011\uff40\014\uff40\016\uff40\020\uff40\024\uff40\027" +
    "\uff40\035\uff40\036\uff40\042\uff40\043\uff40\044\uff40\045\uff40" +
    "\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40\055\uff40\056" +
    "\uff40\057\uff40\060\uff40\062\uff40\064\uff40\065\uff40\067\uff40" +
    "\070\uff40\001\002\000\044\004\uff66\005\uff66\011\uff66\014" +
    "\uff66\020\uff66\027\uff66\035\170\036\164\042\uff66\045\166" +
    "\046\165\052\uff66\055\uff66\056\uff66\062\uff66\064\uff66\065" +
    "\uff66\001\002\000\076\004\uff44\005\uff44\006\uff44\007\uff44" +
    "\011\uff44\014\uff44\016\uff44\020\uff44\024\uff44\027\uff44\035" +
    "\uff44\036\uff44\042\uff44\043\uff44\044\uff44\045\uff44\046\uff44" +
    "\047\uff44\050\uff44\051\uff44\052\uff44\055\uff44\056\uff44\057" +
    "\uff44\060\uff44\062\uff44\064\uff44\065\uff44\067\uff44\070\uff44" +
    "\001\002\000\034\004\uff68\005\uff68\011\uff68\014\uff68\020" +
    "\uff68\027\162\042\uff68\052\161\055\uff68\056\uff68\062\uff68" +
    "\064\uff68\065\uff68\001\002\000\076\004\uff4a\005\uff4a\006" +
    "\211\007\uff4a\011\uff4a\014\uff4a\016\uff4a\020\uff4a\024\210" +
    "\027\uff4a\035\uff4a\036\uff4a\042\uff4a\043\205\044\206\045" +
    "\uff4a\046\uff4a\047\uff4a\050\076\051\uff4a\052\uff4a\055\uff4a" +
    "\056\uff4a\057\uff4a\060\065\062\uff4a\064\uff4a\065\uff4a\067" +
    "\uff4a\070\uff4a\001\002\000\030\004\156\005\uff6a\011\uff6a" +
    "\014\uff6a\020\uff6a\042\uff6a\055\uff6a\056\uff6a\062\uff6a\064" +
    "\uff6a\065\uff6a\001\002\000\076\004\uff3f\005\uff3f\006\uff3f" +
    "\007\uff3f\011\uff3f\014\uff3f\016\uff3f\020\uff3f\024\uff3f\027" +
    "\uff3f\035\uff3f\036\uff3f\042\uff3f\043\uff3f\044\uff3f\045\uff3f" +
    "\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f\055\uff3f\056" +
    "\uff3f\057\uff3f\060\uff3f\062\uff3f\064\uff3f\065\uff3f\067\uff3f" +
    "\070\uff3f\001\002\000\026\005\uff6c\011\uff6c\014\154\020" +
    "\uff6c\042\uff6c\055\uff6c\056\uff6c\062\uff6c\064\uff6c\065\uff6c" +
    "\001\002\000\004\065\uffea\001\002\000\024\005\uff6e\011" +
    "\152\020\uff6e\042\uff6e\055\uff6e\056\uff6e\062\uff6e\064\uff6e" +
    "\065\uff6e\001\002\000\022\005\uff70\020\uff71\042\uff71\055" +
    "\uff71\056\uff71\062\uff71\064\uff71\065\uff71\001\002\000\020" +
    "\020\uff74\042\uff74\055\uff73\056\uff74\062\uff74\064\uff74\065" +
    "\uff74\001\002\000\076\004\uff3c\005\uff3c\006\uff3c\007\uff3c" +
    "\011\uff3c\014\uff3c\016\uff3c\020\uff3c\024\uff3c\027\uff3c\035" +
    "\uff3c\036\uff3c\042\uff3c\043\uff3c\044\uff3c\045\uff3c\046\uff3c" +
    "\047\uff3c\050\uff3c\051\uff3c\052\uff3c\055\uff3c\056\uff3c\057" +
    "\uff3c\060\uff3c\062\uff3c\064\uff3c\065\uff3c\067\uff3c\070\uff3c" +
    "\001\002\000\046\004\073\017\102\031\067\044\075\047" +
    "\066\050\076\053\063\054\103\057\100\060\065\066\071" +
    "\070\104\073\062\075\054\102\101\103\064\104\046\107" +
    "\072\001\002\000\076\004\uff42\005\uff42\006\uff42\007\uff42" +
    "\011\uff42\014\uff42\016\uff42\020\uff42\024\uff42\027\uff42\035" +
    "\uff42\036\uff42\042\uff42\043\uff42\044\uff42\045\uff42\046\uff42" +
    "\047\uff42\050\uff42\051\uff42\052\uff42\055\uff42\056\uff42\057" +
    "\uff42\060\uff42\062\uff42\064\uff42\065\uff42\067\uff42\070\uff42" +
    "\001\002\000\124\004\uff54\005\uff54\006\uff54\007\uff54\011" +
    "\uff54\014\uff54\016\uff54\017\uff54\020\uff54\024\uff54\027\uff54" +
    "\031\uff54\035\uff54\036\uff54\042\uff54\043\uff54\044\uff54\045" +
    "\uff54\046\uff54\047\uff54\050\uff54\051\uff54\052\uff54\053\uff54" +
    "\054\uff54\055\uff54\056\uff54\057\uff54\060\uff54\062\uff54\064" +
    "\uff54\065\uff54\066\uff54\067\uff54\070\uff54\073\uff54\075\uff54" +
    "\102\uff54\103\uff54\104\uff54\107\uff54\001\002\000\046\004" +
    "\uff36\017\uff36\031\uff36\044\uff36\047\uff36\050\uff36\053\uff36" +
    "\054\uff36\057\uff36\060\uff36\066\uff36\070\uff36\073\uff36\075" +
    "\uff36\102\uff36\103\uff36\104\uff36\107\uff36\001\002\000\076" +
    "\004\uff3e\005\uff3e\006\uff3e\007\uff3e\011\uff3e\014\uff3e\016" +
    "\uff3e\020\uff3e\024\uff3e\027\uff3e\035\uff3e\036\uff3e\042\uff3e" +
    "\043\uff3e\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050\uff3e\051" +
    "\uff3e\052\uff3e\055\uff3e\056\uff3e\057\uff3e\060\uff3e\062\uff3e" +
    "\064\uff3e\065\uff3e\067\uff3e\070\uff3e\001\002\000\006\062" +
    "\uff7a\065\uff7a\001\002\000\004\044\124\001\002\000\076" +
    "\004\uff3a\005\uff3a\006\uff3a\007\uff3a\011\uff3a\014\uff3a\016" +
    "\uff3a\020\uff3a\024\uff3a\027\uff3a\035\uff3a\036\uff3a\042\uff3a" +
    "\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047\uff3a\050\uff3a\051" +
    "\uff3a\052\uff3a\055\uff3a\056\uff3a\057\uff3a\060\uff3a\062\uff3a" +
    "\064\uff3a\065\uff3a\067\uff3a\070\uff3a\001\002\000\046\004" +
    "\073\017\102\031\067\044\075\047\066\050\076\053\063" +
    "\054\103\057\100\060\065\066\071\070\104\073\062\075" +
    "\054\102\101\103\064\104\046\107\072\001\002\000\046" +
    "\004\073\017\102\031\067\044\075\047\066\050\076\053" +
    "\063\054\103\057\100\060\065\066\071\070\104\073\062" +
    "\075\054\102\101\103\064\104\046\107\072\001\002\000" +
    "\056\004\073\012\032\017\102\031\067\032\035\040\036" +
    "\044\075\047\066\050\076\053\063\054\103\057\100\060" +
    "\065\066\071\070\104\073\062\075\054\102\101\103\064" +
    "\104\046\105\031\107\072\001\002\000\124\004\uff53\005" +
    "\uff53\006\uff53\007\uff53\011\uff53\014\uff53\016\uff53\017\uff53" +
    "\020\uff53\024\uff53\027\uff53\031\uff53\035\uff53\036\uff53\042" +
    "\uff53\043\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53" +
    "\051\uff53\052\uff53\053\uff53\054\uff53\055\uff53\056\uff53\057" +
    "\uff53\060\uff53\062\uff53\064\uff53\065\uff53\066\uff53\067\uff53" +
    "\070\uff53\073\uff53\075\uff53\102\uff53\103\uff53\104\uff53\107" +
    "\uff53\001\002\000\046\004\073\017\102\031\067\044\075" +
    "\047\066\050\076\053\063\054\103\057\100\060\065\066" +
    "\071\070\104\073\062\075\054\102\101\103\064\104\046" +
    "\107\072\001\002\000\046\004\uff37\017\uff37\031\uff37\044" +
    "\uff37\047\uff37\050\uff37\053\uff37\054\uff37\057\uff37\060\uff37" +
    "\066\uff37\070\uff37\073\uff37\075\uff37\102\uff37\103\uff37\104" +
    "\uff37\107\uff37\001\002\000\076\004\uff41\005\uff41\006\uff41" +
    "\007\uff41\011\uff41\014\uff41\016\uff41\020\uff41\024\uff41\027" +
    "\uff41\035\uff41\036\uff41\042\uff41\043\uff41\044\uff41\045\uff41" +
    "\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41\055\uff41\056" +
    "\uff41\057\uff41\060\uff41\062\uff41\064\uff41\065\uff41\067\uff41" +
    "\070\uff41\001\002\000\004\107\106\001\002\000\076\004" +
    "\uff3d\005\uff3d\006\uff3d\007\uff3d\011\uff3d\014\uff3d\016\uff3d" +
    "\020\uff3d\024\uff3d\027\uff3d\035\uff3d\036\uff3d\042\uff3d\043" +
    "\uff3d\044\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d" +
    "\052\uff3d\055\uff3d\056\uff3d\057\uff3d\060\uff3d\062\uff3d\064" +
    "\uff3d\065\uff3d\067\uff3d\070\uff3d\001\002\000\046\004\073" +
    "\017\102\031\067\044\075\047\066\050\076\053\063\054" +
    "\103\057\100\060\065\066\071\070\104\073\062\075\054" +
    "\102\101\103\064\104\046\107\072\001\002\000\062\004" +
    "\uff52\005\uff52\007\uff52\011\uff52\014\uff52\016\uff52\020\uff52" +
    "\027\uff52\035\uff52\036\uff52\042\uff52\045\uff52\046\uff52\047" +
    "\uff52\051\uff52\052\uff52\055\uff52\056\uff52\057\uff52\062\uff52" +
    "\064\uff52\065\uff52\067\uff52\070\uff52\001\002\000\076\004" +
    "\uff3b\005\uff3b\006\uff3b\007\uff3b\011\uff3b\014\uff3b\016\uff3b" +
    "\020\uff3b\024\uff3b\027\uff3b\035\uff3b\036\uff3b\042\uff3b\043" +
    "\uff3b\044\uff3b\045\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b" +
    "\052\uff3b\055\uff3b\056\uff3b\057\uff3b\060\uff3b\062\uff3b\064" +
    "\uff3b\065\uff3b\067\uff3b\070\uff3b\001\002\000\062\004\uff50" +
    "\005\uff50\007\uff50\011\uff50\014\uff50\016\uff50\020\uff50\027" +
    "\uff50\035\uff50\036\uff50\042\uff50\045\uff50\046\uff50\047\uff50" +
    "\051\uff50\052\uff50\055\uff50\056\uff50\057\uff50\062\uff50\064" +
    "\uff50\065\uff50\067\uff50\070\uff50\001\002\000\004\070\116" +
    "\001\002\000\004\064\114\001\002\000\004\064\113\001" +
    "\002\000\076\004\uff43\005\uff43\006\uff43\007\uff43\011\uff43" +
    "\014\uff43\016\uff43\020\uff43\024\uff43\027\uff43\035\uff43\036" +
    "\uff43\042\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047\uff43" +
    "\050\uff43\051\uff43\052\uff43\055\uff43\056\uff43\057\uff43\060" +
    "\uff43\062\uff43\064\uff43\065\uff43\067\uff43\070\uff43\001\002" +
    "\000\046\004\073\017\102\031\067\044\075\047\066\050" +
    "\076\053\063\054\103\057\100\060\065\066\071\070\104" +
    "\073\062\075\054\102\101\103\064\104\046\107\072\001" +
    "\002\000\062\004\uff4c\005\uff4c\007\uff4c\011\uff4c\014\uff4c" +
    "\016\uff4c\020\uff4c\027\uff4c\035\uff4c\036\uff4c\042\uff4c\045" +
    "\uff4c\046\uff4c\047\uff4c\051\uff4c\052\uff4c\055\uff4c\056\uff4c" +
    "\057\uff4c\062\uff4c\064\uff4c\065\uff4c\067\uff4c\070\uff4c\001" +
    "\002\000\014\004\uffb9\043\uffb9\064\uffb9\070\uffb9\107\uffb9" +
    "\001\002\000\014\004\uffc5\043\uffc5\064\uffc5\070\116\107" +
    "\uffc5\001\002\000\014\004\uffbb\043\uffbb\064\uffbb\070\uffbb" +
    "\107\uffbb\001\002\000\014\004\uffba\043\uffba\064\uffba\070" +
    "\uffba\107\uffba\001\002\000\062\004\uff4b\005\uff4b\007\uff4b" +
    "\011\uff4b\014\uff4b\016\uff4b\020\uff4b\027\uff4b\035\uff4b\036" +
    "\uff4b\042\uff4b\045\uff4b\046\uff4b\047\uff4b\051\uff4b\052\uff4b" +
    "\055\uff4b\056\uff4b\057\uff4b\062\uff4b\064\uff4b\065\uff4b\067" +
    "\uff4b\070\uff4b\001\002\000\062\004\uff51\005\uff51\007\uff51" +
    "\011\uff51\014\uff51\016\uff51\020\uff51\027\uff51\035\uff51\036" +
    "\uff51\042\uff51\045\uff51\046\uff51\047\uff51\051\uff51\052\uff51" +
    "\055\uff51\056\uff51\057\uff51\062\uff51\064\uff51\065\uff51\067" +
    "\uff51\070\uff51\001\002\000\056\004\073\012\032\017\102" +
    "\031\067\032\035\040\036\044\075\047\066\050\076\053" +
    "\063\054\103\057\100\060\065\066\071\070\104\073\062" +
    "\075\054\102\101\103\064\104\046\105\031\107\072\001" +
    "\002\000\004\064\141\001\002\000\014\004\uffc7\043\uffc7" +
    "\064\uffc7\070\116\107\uffc7\001\002\000\006\043\131\064" +
    "\uffb7\001\002\000\012\004\uffc8\043\uffc8\064\uffc8\107\uffc8" +
    "\001\002\000\046\004\073\017\102\031\067\044\075\047" +
    "\066\050\076\053\063\054\103\057\100\060\065\066\071" +
    "\070\104\073\062\075\054\102\101\103\064\104\046\107" +
    "\072\001\002\000\016\007\uffb8\016\uffb8\020\uffb8\043\131" +
    "\064\uffb8\065\uffb8\001\002\000\004\064\135\001\002\000" +
    "\016\007\uffb6\016\uffb6\020\uffb6\043\uffb6\064\uffb6\065\uffb6" +
    "\001\002\000\062\004\uff4d\005\uff4d\007\uff4d\011\uff4d\014" +
    "\uff4d\016\uff4d\020\uff4d\027\uff4d\035\uff4d\036\uff4d\042\uff4d" +
    "\045\uff4d\046\uff4d\047\uff4d\051\uff4d\052\uff4d\055\uff4d\056" +
    "\uff4d\057\uff4d\062\uff4d\064\uff4d\065\uff4d\067\uff4d\070\uff4d" +
    "\001\002\000\016\007\uffb5\016\uffb5\020\uffb5\043\uffb5\064" +
    "\uffb5\065\uffb5\001\002\000\004\062\140\001\002\000\016" +
    "\007\uffb4\016\uffb4\020\uffb4\043\uffb4\064\uffb4\065\uffb4\001" +
    "\002\000\062\004\uff4e\005\uff4e\007\uff4e\011\uff4e\014\uff4e" +
    "\016\uff4e\020\uff4e\027\uff4e\035\uff4e\036\uff4e\042\uff4e\045" +
    "\uff4e\046\uff4e\047\uff4e\051\uff4e\052\uff4e\055\uff4e\056\uff4e" +
    "\057\uff4e\062\uff4e\064\uff4e\065\uff4e\067\uff4e\070\uff4e\001" +
    "\002\000\062\004\uff4f\005\uff4f\007\uff4f\011\uff4f\014\uff4f" +
    "\016\uff4f\020\uff4f\027\uff4f\035\uff4f\036\uff4f\042\uff4f\045" +
    "\uff4f\046\uff4f\047\uff4f\051\uff4f\052\uff4f\055\uff4f\056\uff4f" +
    "\057\uff4f\062\uff4f\064\uff4f\065\uff4f\067\uff4f\070\uff4f\001" +
    "\002\000\004\055\144\001\002\000\046\004\073\017\102" +
    "\031\067\044\075\047\066\050\076\053\063\054\103\057" +
    "\100\060\065\066\071\070\104\073\062\075\054\102\101" +
    "\103\064\104\046\107\072\001\002\000\056\004\uff60\005" +
    "\uff60\011\uff60\014\uff60\020\uff60\027\uff60\035\uff60\036\uff60" +
    "\042\uff60\045\uff60\046\uff60\047\uff60\051\uff60\052\uff60\055" +
    "\uff60\056\uff60\057\uff60\062\uff60\064\uff60\065\uff60\067\uff60" +
    "\070\uff60\001\002\000\022\005\uff70\020\uff72\042\uff72\055" +
    "\uff72\056\uff72\062\uff72\064\uff72\065\uff72\001\002\000\004" +
    "\005\150\001\002\000\046\004\073\017\102\031\067\044" +
    "\075\047\066\050\076\053\063\054\103\057\100\060\065" +
    "\066\071\070\104\073\062\075\054\102\101\103\064\104" +
    "\046\107\072\001\002\000\024\005\uff6f\011\152\020\uff6f" +
    "\042\uff6f\055\uff6f\056\uff6f\062\uff6f\064\uff6f\065\uff6f\001" +
    "\002\000\046\004\073\017\102\031\067\044\075\047\066" +
    "\050\076\053\063\054\103\057\100\060\065\066\071\070" +
    "\104\073\062\075\054\102\101\103\064\104\046\107\072" +
    "\001\002\000\026\005\uff6d\011\uff6d\014\154\020\uff6d\042" +
    "\uff6d\055\uff6d\056\uff6d\062\uff6d\064\uff6d\065\uff6d\001\002" +
    "\000\046\004\073\017\102\031\067\044\075\047\066\050" +
    "\076\053\063\054\103\057\100\060\065\066\071\070\104" +
    "\073\062\075\054\102\101\103\064\104\046\107\072\001" +
    "\002\000\030\004\156\005\uff6b\011\uff6b\014\uff6b\020\uff6b" +
    "\042\uff6b\055\uff6b\056\uff6b\062\uff6b\064\uff6b\065\uff6b\001" +
    "\002\000\046\004\073\017\102\031\067\044\075\047\066" +
    "\050\076\053\063\054\103\057\100\060\065\066\071\070" +
    "\104\073\062\075\054\102\101\103\064\104\046\107\072" +
    "\001\002\000\034\004\uff69\005\uff69\011\uff69\014\uff69\020" +
    "\uff69\027\162\042\uff69\052\161\055\uff69\056\uff69\062\uff69" +
    "\064\uff69\065\uff69\001\002\000\046\004\073\017\102\031" +
    "\067\044\075\047\066\050\076\053\063\054\103\057\100" +
    "\060\065\066\071\070\104\073\062\075\054\102\101\103" +
    "\064\104\046\107\072\001\002\000\046\004\uff5e\017\uff5e" +
    "\031\uff5e\044\uff5e\047\uff5e\050\uff5e\053\uff5e\054\uff5e\057" +
    "\uff5e\060\uff5e\066\uff5e\070\uff5e\073\uff5e\075\uff5e\102\uff5e" +
    "\103\uff5e\104\uff5e\107\uff5e\001\002\000\046\004\uff5f\017" +
    "\uff5f\031\uff5f\044\uff5f\047\uff5f\050\uff5f\053\uff5f\054\uff5f" +
    "\057\uff5f\060\uff5f\066\uff5f\070\uff5f\073\uff5f\075\uff5f\102" +
    "\uff5f\103\uff5f\104\uff5f\107\uff5f\001\002\000\044\004\uff67" +
    "\005\uff67\011\uff67\014\uff67\020\uff67\027\uff67\035\170\036" +
    "\164\042\uff67\045\166\046\165\052\uff67\055\uff67\056\uff67" +
    "\062\uff67\064\uff67\065\uff67\001\002\000\046\004\uff5a\017" +
    "\uff5a\031\uff5a\044\uff5a\047\uff5a\050\uff5a\053\uff5a\054\uff5a" +
    "\057\uff5a\060\uff5a\066\uff5a\070\uff5a\073\uff5a\075\uff5a\102" +
    "\uff5a\103\uff5a\104\uff5a\107\uff5a\001\002\000\046\004\uff5b" +
    "\017\uff5b\031\uff5b\044\uff5b\047\uff5b\050\uff5b\053\uff5b\054" +
    "\uff5b\057\uff5b\060\uff5b\066\uff5b\070\uff5b\073\uff5b\075\uff5b" +
    "\102\uff5b\103\uff5b\104\uff5b\107\uff5b\001\002\000\046\004" +
    "\uff5d\017\uff5d\031\uff5d\044\uff5d\047\uff5d\050\uff5d\053\uff5d" +
    "\054\uff5d\057\uff5d\060\uff5d\066\uff5d\070\uff5d\073\uff5d\075" +
    "\uff5d\102\uff5d\103\uff5d\104\uff5d\107\uff5d\001\002\000\046" +
    "\004\073\017\102\031\067\044\075\047\066\050\076\053" +
    "\063\054\103\057\100\060\065\066\071\070\104\073\062" +
    "\075\054\102\101\103\064\104\046\107\072\001\002\000" +
    "\046\004\uff5c\017\uff5c\031\uff5c\044\uff5c\047\uff5c\050\uff5c" +
    "\053\uff5c\054\uff5c\057\uff5c\060\uff5c\066\uff5c\070\uff5c\073" +
    "\uff5c\075\uff5c\102\uff5c\103\uff5c\104\uff5c\107\uff5c\001\002" +
    "\000\050\004\uff65\005\uff65\011\uff65\014\uff65\020\uff65\027" +
    "\uff65\035\uff65\036\uff65\042\uff65\045\uff65\046\uff65\047\173" +
    "\052\uff65\055\uff65\056\uff65\057\172\062\uff65\064\uff65\065" +
    "\uff65\001\002\000\046\004\uff59\017\uff59\031\uff59\044\uff59" +
    "\047\uff59\050\uff59\053\uff59\054\uff59\057\uff59\060\uff59\066" +
    "\uff59\070\uff59\073\uff59\075\uff59\102\uff59\103\uff59\104\uff59" +
    "\107\uff59\001\002\000\046\004\uff58\017\uff58\031\uff58\044" +
    "\uff58\047\uff58\050\uff58\053\uff58\054\uff58\057\uff58\060\uff58" +
    "\066\uff58\070\uff58\073\uff58\075\uff58\102\uff58\103\uff58\104" +
    "\uff58\107\uff58\001\002\000\046\004\073\017\102\031\067" +
    "\044\075\047\066\050\076\053\063\054\103\057\100\060" +
    "\065\066\071\070\104\073\062\075\054\102\101\103\064" +
    "\104\046\107\072\001\002\000\056\004\uff63\005\uff63\011" +
    "\uff63\014\uff63\020\uff63\027\uff63\035\uff63\036\uff63\042\uff63" +
    "\045\uff63\046\uff63\047\uff63\051\176\052\uff63\055\uff63\056" +
    "\uff63\057\uff63\062\uff63\064\uff63\065\uff63\067\200\070\177" +
    "\001\002\000\046\004\uff55\017\uff55\031\uff55\044\uff55\047" +
    "\uff55\050\uff55\053\uff55\054\uff55\057\uff55\060\uff55\066\uff55" +
    "\070\uff55\073\uff55\075\uff55\102\uff55\103\uff55\104\uff55\107" +
    "\uff55\001\002\000\046\004\uff57\017\uff57\031\uff57\044\uff57" +
    "\047\uff57\050\uff57\053\uff57\054\uff57\057\uff57\060\uff57\066" +
    "\uff57\070\uff57\073\uff57\075\uff57\102\uff57\103\uff57\104\uff57" +
    "\107\uff57\001\002\000\046\004\uff56\017\uff56\031\uff56\044" +
    "\uff56\047\uff56\050\uff56\053\uff56\054\uff56\057\uff56\060\uff56" +
    "\066\uff56\070\uff56\073\uff56\075\uff56\102\uff56\103\uff56\104" +
    "\uff56\107\uff56\001\002\000\046\004\073\017\102\031\067" +
    "\044\075\047\066\050\076\053\063\054\103\057\100\060" +
    "\065\066\071\070\104\073\062\075\054\102\101\103\064" +
    "\104\046\107\072\001\002\000\056\004\uff61\005\uff61\011" +
    "\uff61\014\uff61\020\uff61\027\uff61\035\uff61\036\uff61\042\uff61" +
    "\045\uff61\046\uff61\047\uff61\051\uff61\052\uff61\055\uff61\056" +
    "\uff61\057\uff61\062\uff61\064\uff61\065\uff61\067\uff61\070\uff61" +
    "\001\002\000\004\065\204\001\002\000\126\002\uffe9\004" +
    "\uffe9\010\uffe9\012\uffe9\013\uffe9\015\uffe9\017\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\037\uffe9\040\uffe9\042\uffe9\044\uffe9\047\uffe9\050\uffe9" +
    "\053\uffe9\054\uffe9\057\uffe9\060\uffe9\061\uffe9\063\uffe9\066" +
    "\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\075\uffe9\076\uffe9" +
    "\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106" +
    "\uffe9\107\uffe9\001\002\000\046\004\073\017\102\031\067" +
    "\044\075\047\066\050\076\053\063\054\103\057\100\060" +
    "\065\066\071\070\104\073\062\075\054\102\101\103\064" +
    "\104\046\107\072\001\002\000\050\004\073\017\102\031" +
    "\067\044\075\047\066\050\076\053\063\054\103\057\100" +
    "\060\065\064\uff78\066\071\070\104\073\062\075\054\102" +
    "\101\103\064\104\046\107\072\001\002\000\076\004\uff46" +
    "\005\uff46\006\uff46\007\uff46\011\uff46\014\uff46\016\uff46\020" +
    "\uff46\024\uff46\027\uff46\035\uff46\036\uff46\042\uff46\043\uff46" +
    "\044\uff46\045\uff46\046\uff46\047\uff46\050\uff46\051\uff46\052" +
    "\uff46\055\uff46\056\uff46\057\uff46\060\uff46\062\uff46\064\uff46" +
    "\065\uff46\067\uff46\070\uff46\001\002\000\004\107\213\001" +
    "\002\000\004\107\212\001\002\000\076\004\uff47\005\uff47" +
    "\006\uff47\007\uff47\011\uff47\014\uff47\016\uff47\020\uff47\024" +
    "\uff47\027\uff47\035\uff47\036\uff47\042\uff47\043\uff47\044\uff47" +
    "\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47\052\uff47\055" +
    "\uff47\056\uff47\057\uff47\060\uff47\062\uff47\064\uff47\065\uff47" +
    "\067\uff47\070\uff47\001\002\000\076\004\uff49\005\uff49\006" +
    "\uff49\007\uff49\011\uff49\014\uff49\016\uff49\020\uff49\024\uff49" +
    "\027\uff49\035\uff49\036\uff49\042\uff49\043\uff49\044\uff49\045" +
    "\uff49\046\uff49\047\uff49\050\uff49\051\uff49\052\uff49\055\uff49" +
    "\056\uff49\057\uff49\060\uff49\062\uff49\064\uff49\065\uff49\067" +
    "\uff49\070\uff49\001\002\000\006\020\uff77\064\uff77\001\002" +
    "\000\006\020\220\064\uff79\001\002\000\004\064\217\001" +
    "\002\000\076\004\uff45\005\uff45\006\uff45\007\uff45\011\uff45" +
    "\014\uff45\016\uff45\020\uff45\024\uff45\027\uff45\035\uff45\036" +
    "\uff45\042\uff45\043\uff45\044\uff45\045\uff45\046\uff45\047\uff45" +
    "\050\uff45\051\uff45\052\uff45\055\uff45\056\uff45\057\uff45\060" +
    "\uff45\062\uff45\064\uff45\065\uff45\067\uff45\070\uff45\001\002" +
    "\000\046\004\073\017\102\031\067\044\075\047\066\050" +
    "\076\053\063\054\103\057\100\060\065\066\071\070\104" +
    "\073\062\075\054\102\101\103\064\104\046\107\072\001" +
    "\002\000\006\020\uff76\064\uff76\001\002\000\004\062\223" +
    "\001\002\000\076\004\uff48\005\uff48\006\uff48\007\uff48\011" +
    "\uff48\014\uff48\016\uff48\020\uff48\024\uff48\027\uff48\035\uff48" +
    "\036\uff48\042\uff48\043\uff48\044\uff48\045\uff48\046\uff48\047" +
    "\uff48\050\uff48\051\uff48\052\uff48\055\uff48\056\uff48\057\uff48" +
    "\060\uff48\062\uff48\064\uff48\065\uff48\067\uff48\070\uff48\001" +
    "\002\000\046\004\073\017\102\031\067\044\075\047\066" +
    "\050\076\053\063\054\103\057\100\060\065\066\071\070" +
    "\104\073\062\075\054\102\101\103\064\104\046\107\072" +
    "\001\002\000\016\020\uff75\042\uff75\056\uff75\062\uff75\064" +
    "\uff75\065\uff75\001\002\000\004\007\227\001\002\000\046" +
    "\004\073\017\102\031\067\044\075\047\066\050\076\053" +
    "\063\054\103\057\100\060\065\066\071\070\104\073\062" +
    "\075\054\102\101\103\064\104\046\107\072\001\002\000" +
    "\004\065\uffec\001\002\000\004\065\232\001\002\000\126" +
    "\002\uffeb\004\uffeb\010\uffeb\012\uffeb\013\uffeb\015\uffeb\017" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\037\uffeb\040\uffeb\042\uffeb\044\uffeb\047" +
    "\uffeb\050\uffeb\053\uffeb\054\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\063\uffeb\066\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075" +
    "\uffeb\076\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb" +
    "\105\uffeb\106\uffeb\107\uffeb\001\002\000\010\016\uffb7\043" +
    "\131\065\uffb7\001\002\000\006\016\235\065\uff93\001\002" +
    "\000\004\044\242\001\002\000\004\065\uffee\001\002\000" +
    "\004\065\uff94\001\002\000\004\065\241\001\002\000\126" +
    "\002\uffed\004\uffed\010\uffed\012\uffed\013\uffed\015\uffed\017" +
    "\uffed\021\uffed\022\uffed\023\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\037\uffed\040\uffed\042\uffed\044\uffed\047" +
    "\uffed\050\uffed\053\uffed\054\uffed\057\uffed\060\uffed\061\uffed" +
    "\063\uffed\066\uffed\070\uffed\071\uffed\072\uffed\073\uffed\075" +
    "\uffed\076\uffed\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed" +
    "\105\uffed\106\uffed\107\uffed\001\002\000\050\004\073\017" +
    "\102\031\067\044\075\047\066\050\076\053\063\054\103" +
    "\057\100\060\065\064\uff78\066\071\070\104\073\062\075" +
    "\054\102\101\103\064\104\046\107\072\001\002\000\004" +
    "\064\244\001\002\000\004\065\uff92\001\002\000\004\007" +
    "\246\001\002\000\046\004\073\017\102\031\067\044\075" +
    "\047\066\050\076\053\063\054\103\057\100\060\065\066" +
    "\071\070\104\073\062\075\054\102\101\103\064\104\046" +
    "\107\072\001\002\000\004\065\ufff0\001\002\000\004\065" +
    "\251\001\002\000\126\002\uffef\004\uffef\010\uffef\012\uffef" +
    "\013\uffef\015\uffef\017\uffef\021\uffef\022\uffef\023\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\037\uffef\040\uffef" +
    "\042\uffef\044\uffef\047\uffef\050\uffef\053\uffef\054\uffef\057" +
    "\uffef\060\uffef\061\uffef\063\uffef\066\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\075\uffef\076\uffef\100\uffef\101\uffef\102" +
    "\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\001\002" +
    "\000\010\007\uffb7\043\131\065\uffb7\001\002\000\006\007" +
    "\255\065\uff95\001\002\000\004\065\ufff2\001\002\000\046" +
    "\004\073\017\102\031\067\044\075\047\066\050\076\053" +
    "\063\054\103\057\100\060\065\066\071\070\104\073\062" +
    "\075\054\102\101\103\064\104\046\107\072\001\002\000" +
    "\004\065\uff96\001\002\000\004\065\260\001\002\000\126" +
    "\002\ufff1\004\ufff1\010\ufff1\012\ufff1\013\ufff1\015\ufff1\017" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\037\ufff1\040\ufff1\042\ufff1\044\ufff1\047" +
    "\ufff1\050\ufff1\053\ufff1\054\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\063\ufff1\066\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\075" +
    "\ufff1\076\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1" +
    "\105\ufff1\106\ufff1\107\ufff1\001\002\000\012\004\uffc4\043" +
    "\uffc4\064\uffc4\107\uffc4\001\002\000\014\004\uffbd\043\uffbd" +
    "\064\uffbd\070\116\107\uffbd\001\002\000\004\042\264\001" +
    "\002\000\012\012\uffe6\032\uffe6\040\uffe6\105\uffe6\001\002" +
    "\000\012\012\032\032\035\040\036\105\031\001\002\000" +
    "\020\012\032\032\035\034\uffde\040\036\061\uffde\074\275" +
    "\105\277\001\002\000\004\107\271\001\002\000\020\012" +
    "\uffe2\032\uffe2\034\uffe2\040\uffe2\061\uffe2\074\uffe2\105\uffe2" +
    "\001\002\000\006\043\131\065\uffb7\001\002\000\004\065" +
    "\273\001\002\000\020\012\uffe0\032\uffe0\034\uffe0\040\uffe0" +
    "\061\uffe0\074\uffe0\105\uffe0\001\002\000\012\034\uffda\061" +
    "\uffda\074\uffda\105\uffda\001\002\000\004\105\u0132\001\002" +
    "\000\020\012\uffe1\032\uffe1\034\uffe1\040\uffe1\061\uffe1\074" +
    "\uffe1\105\uffe1\001\002\000\006\044\uffd9\070\uffc0\001\002" +
    "\000\012\034\uffdf\061\uffdf\074\275\105\315\001\002\000" +
    "\012\034\uffdd\061\uffdd\074\uffdd\105\uffdd\001\002\000\012" +
    "\034\uffdb\061\uffdb\074\uffdb\105\uffdb\001\002\000\006\034" +
    "\uffe5\061\uffe5\001\002\000\006\034\011\061\uffd3\001\002" +
    "\000\006\034\uffd2\061\uffd2\001\002\000\006\034\011\061" +
    "\uffd4\001\002\000\006\034\uffd0\061\uffd0\001\002\000\004" +
    "\061\uffe4\001\002\000\004\061\312\001\002\000\004\065" +
    "\313\001\002\000\030\002\uffe3\010\uffe3\012\uffe3\021\uffe3" +
    "\032\uffe3\034\uffe3\040\uffe3\071\uffe3\072\uffe3\105\uffe3\106" +
    "\uffe3\001\002\000\006\034\uffd1\061\uffd1\001\002\000\004" +
    "\044\uffd9\001\002\000\012\034\uffdc\061\uffdc\074\uffdc\105" +
    "\uffdc\001\002\000\004\044\320\001\002\000\014\012\032" +
    "\032\035\040\036\064\uff9c\105\031\001\002\000\006\004" +
    "\u0101\107\uff97\001\002\000\006\020\u012d\064\uff9d\001\002" +
    "\000\006\020\uff9b\064\uff9b\001\002\000\004\064\325\001" +
    "\002\000\004\042\uffd8\001\002\000\004\042\327\001\002" +
    "\000\116\004\073\010\uffe7\012\uffe7\013\357\015\347\017" +
    "\102\021\uffe7\022\335\023\333\030\353\031\067\032\uffe7" +
    "\033\361\037\363\040\uffe7\042\342\044\075\047\066\050" +
    "\076\053\063\054\103\057\100\060\065\061\uffaf\063\337" +
    "\066\071\070\104\071\015\073\062\075\054\076\332\100" +
    "\343\101\334\102\101\103\064\104\046\105\uffe7\107\072" +
    "\001\002\000\116\004\uffa2\010\uffa2\012\uffa2\013\uffa2\015" +
    "\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\037\uffa2\040\uffa2\042\uffa2\044\uffa2\047" +
    "\uffa2\050\uffa2\053\uffa2\054\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\063\uffa2\066\uffa2\070\uffa2\071\uffa2\073\uffa2\075\uffa2\076" +
    "\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2" +
    "\107\uffa2\001\002\000\116\004\uffa3\010\uffa3\012\uffa3\013" +
    "\uffa3\015\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\037\uffa3\040\uffa3\042\uffa3\044" +
    "\uffa3\047\uffa3\050\uffa3\053\uffa3\054\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\063\uffa3\066\uffa3\070\uffa3\071\uffa3\073\uffa3\075" +
    "\uffa3\076\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\105\uffa3\107\uffa3\001\002\000\046\004\uff8b\017\uff8b\031" +
    "\uff8b\044\uff8b\047\uff8b\050\uff8b\053\uff8b\054\uff8b\057\uff8b" +
    "\060\uff8b\066\uff8b\070\uff8b\073\uff8b\075\uff8b\102\uff8b\103" +
    "\uff8b\104\uff8b\107\uff8b\001\002\000\004\056\u0121\001\002" +
    "\000\046\004\073\017\102\031\067\044\075\047\066\050" +
    "\076\053\063\054\103\057\100\060\065\066\071\070\104" +
    "\073\062\075\054\102\101\103\064\104\046\107\072\001" +
    "\002\000\004\065\u011e\001\002\000\116\004\uffa1\010\uffa1" +
    "\012\uffa1\013\uffa1\015\uffa1\017\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\037\uffa1\040\uffa1" +
    "\042\uffa1\044\uffa1\047\uffa1\050\uffa1\053\uffa1\054\uffa1\057" +
    "\uffa1\060\uffa1\061\uffa1\063\uffa1\066\uffa1\070\uffa1\071\uffa1" +
    "\073\uffa1\075\uffa1\076\uffa1\100\uffa1\101\uffa1\102\uffa1\103" +
    "\uffa1\104\uffa1\105\uffa1\107\uffa1\001\002\000\050\004\073" +
    "\017\102\031\067\044\075\047\066\050\076\053\063\054" +
    "\103\057\100\060\065\065\u011c\066\071\070\104\073\062" +
    "\075\054\102\101\103\064\104\046\107\072\001\002\000" +
    "\116\004\uffa0\010\uffa0\012\uffa0\013\uffa0\015\uffa0\017\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\037\uffa0\040\uffa0\042\uffa0\044\uffa0\047\uffa0\050\uffa0" +
    "\053\uffa0\054\uffa0\057\uffa0\060\uffa0\061\uffa0\063\uffa0\066" +
    "\uffa0\070\uffa0\071\uffa0\073\uffa0\075\uffa0\076\uffa0\100\uffa0" +
    "\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\107\uffa0\001" +
    "\002\000\116\004\uffa7\010\uffa7\012\uffa7\013\uffa7\015\uffa7" +
    "\017\uffa7\021\uffa7\022\uffa7\023\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\037\uffa7\040\uffa7\042\uffa7\044\uffa7\047\uffa7" +
    "\050\uffa7\053\uffa7\054\uffa7\057\uffa7\060\uffa7\061\uffa7\063" +
    "\uffa7\066\uffa7\070\uffa7\071\uffa7\073\uffa7\075\uffa7\076\uffa7" +
    "\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\107" +
    "\uffa7\001\002\000\116\004\uffb3\010\uffb3\012\uffb3\013\uffb3" +
    "\015\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\037\uffb3\040\uffb3\042\uffb3\044\uffb3" +
    "\047\uffb3\050\uffb3\053\uffb3\054\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\063\uffb3\066\uffb3\070\uffb3\071\uffb3\073\uffb3\075\uffb3" +
    "\076\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105" +
    "\uffb3\107\uffb3\001\002\000\046\004\073\017\102\031\067" +
    "\044\075\047\066\050\076\053\063\054\103\057\100\060" +
    "\065\066\071\070\104\073\062\075\054\102\101\103\064" +
    "\104\046\107\072\001\002\000\116\004\073\010\uffe7\012" +
    "\uffe7\013\357\015\347\017\102\021\uffe7\022\335\023\333" +
    "\030\353\031\067\032\uffe7\033\361\037\363\040\uffe7\042" +
    "\342\044\075\047\066\050\076\053\063\054\103\057\100" +
    "\060\065\061\uffb0\063\337\066\071\070\104\071\015\073" +
    "\062\075\054\076\332\100\343\101\334\102\101\103\064" +
    "\104\046\105\uffe7\107\072\001\002\000\116\004\uff9f\010" +
    "\uff9f\012\uff9f\013\uff9f\015\uff9f\017\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\037\uff9f\040" +
    "\uff9f\042\uff9f\044\uff9f\047\uff9f\050\uff9f\053\uff9f\054\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\063\uff9f\066\uff9f\070\uff9f\071" +
    "\uff9f\073\uff9f\075\uff9f\076\uff9f\100\uff9f\101\uff9f\102\uff9f" +
    "\103\uff9f\104\uff9f\105\uff9f\107\uff9f\001\002\000\116\004" +
    "\uffaa\010\uffaa\012\uffaa\013\uffaa\015\uffaa\017\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\037" +
    "\uffaa\040\uffaa\042\uffaa\044\uffaa\047\uffaa\050\uffaa\053\uffaa" +
    "\054\uffaa\057\uffaa\060\uffaa\061\uffaa\063\uffaa\066\uffaa\070" +
    "\uffaa\071\uffaa\073\uffaa\075\uffaa\076\uffaa\100\uffaa\101\uffaa" +
    "\102\uffaa\103\uffaa\104\uffaa\105\uffaa\107\uffaa\001\002\000" +
    "\004\041\u0110\001\002\000\116\004\uffa8\010\uffa8\012\uffa8" +
    "\013\uffa8\015\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\037\uffa8\040\uffa8\042\uffa8" +
    "\044\uffa8\047\uffa8\050\uffa8\053\uffa8\054\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\063\uffa8\066\uffa8\070\uffa8\071\uffa8\073\uffa8" +
    "\075\uffa8\076\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\105\uffa8\107\uffa8\001\002\000\004\065\u010f\001\002" +
    "\000\004\061\u010e\001\002\000\004\044\u010a\001\002\000" +
    "\116\004\uffa6\010\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\030\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\037\uffa6\040\uffa6\042\uffa6\044\uffa6\047\uffa6\050\uffa6" +
    "\053\uffa6\054\uffa6\057\uffa6\060\uffa6\061\uffa6\063\uffa6\066" +
    "\uffa6\070\uffa6\071\uffa6\073\uffa6\075\uffa6\076\uffa6\100\uffa6" +
    "\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\107\uffa6\001" +
    "\002\000\116\004\uffac\010\uffac\012\uffac\013\uffac\015\uffac" +
    "\017\uffac\021\uffac\022\uffac\023\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\037\uffac\040\uffac\042\uffac\044\uffac\047\uffac" +
    "\050\uffac\053\uffac\054\uffac\057\uffac\060\uffac\061\uffac\063" +
    "\uffac\066\uffac\070\uffac\071\uffac\073\uffac\075\uffac\076\uffac" +
    "\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\107" +
    "\uffac\001\002\000\116\004\uffae\010\uffae\012\uffae\013\uffae" +
    "\015\uffae\017\uffae\021\uffae\022\uffae\023\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\037\uffae\040\uffae\042\uffae\044\uffae" +
    "\047\uffae\050\uffae\053\uffae\054\uffae\057\uffae\060\uffae\061" +
    "\uffae\063\uffae\066\uffae\070\uffae\071\uffae\073\uffae\075\uffae" +
    "\076\uffae\100\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105" +
    "\uffae\107\uffae\001\002\000\004\065\u0109\001\002\000\116" +
    "\004\uffab\010\uffab\012\uffab\013\uffab\015\uffab\017\uffab\021" +
    "\uffab\022\uffab\023\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\037\uffab\040\uffab\042\uffab\044\uffab\047\uffab\050\uffab\053" +
    "\uffab\054\uffab\057\uffab\060\uffab\061\uffab\063\uffab\066\uffab" +
    "\070\uffab\071\uffab\073\uffab\075\uffab\076\uffab\100\uffab\101" +
    "\uffab\102\uffab\103\uffab\104\uffab\105\uffab\107\uffab\001\002" +
    "\000\004\044\uff88\001\002\000\116\004\uffa4\010\uffa4\012" +
    "\uffa4\013\uffa4\015\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\037\uffa4\040\uffa4\042" +
    "\uffa4\044\uffa4\047\uffa4\050\uffa4\053\uffa4\054\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\063\uffa4\066\uffa4\070\uffa4\071\uffa4\073" +
    "\uffa4\075\uffa4\076\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4" +
    "\104\uffa4\105\uffa4\107\uffa4\001\002\000\046\004\uff91\017" +
    "\uff91\031\uff91\044\uff91\047\uff91\050\uff91\053\uff91\054\uff91" +
    "\057\uff91\060\uff91\066\uff91\070\uff91\073\uff91\075\uff91\102" +
    "\uff91\103\uff91\104\uff91\107\uff91\001\002\000\116\004\uff9e" +
    "\010\uff9e\012\uff9e\013\uff9e\015\uff9e\017\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\037\uff9e" +
    "\040\uff9e\042\uff9e\044\uff9e\047\uff9e\050\uff9e\053\uff9e\054" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\063\uff9e\066\uff9e\070\uff9e" +
    "\071\uff9e\073\uff9e\075\uff9e\076\uff9e\100\uff9e\101\uff9e\102" +
    "\uff9e\103\uff9e\104\uff9e\105\uff9e\107\uff9e\001\002\000\116" +
    "\004\uffa5\010\uffa5\012\uffa5\013\uffa5\015\uffa5\017\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\037\uffa5\040\uffa5\042\uffa5\044\uffa5\047\uffa5\050\uffa5\053" +
    "\uffa5\054\uffa5\057\uffa5\060\uffa5\061\uffa5\063\uffa5\066\uffa5" +
    "\070\uffa5\071\uffa5\073\uffa5\075\uffa5\076\uffa5\100\uffa5\101" +
    "\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\107\uffa5\001\002" +
    "\000\046\004\073\017\102\031\067\044\075\047\066\050" +
    "\076\053\063\054\103\057\100\060\065\066\071\070\104" +
    "\073\062\075\054\102\101\103\064\104\046\107\072\001" +
    "\002\000\004\042\uff90\001\002\000\004\042\342\001\002" +
    "\000\120\004\uff8f\010\uff8f\012\uff8f\013\uff8f\015\uff8f\017" +
    "\uff8f\021\uff8f\022\uff8f\023\uff8f\025\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\033\uff8f\037\uff8f\040\uff8f\042\uff8f\044\uff8f\047" +
    "\uff8f\050\uff8f\053\uff8f\054\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\063\uff8f\066\uff8f\070\uff8f\071\uff8f\073\uff8f\075\uff8f\076" +
    "\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f" +
    "\107\uff8f\001\002\000\120\004\uff8c\010\uff8c\012\uff8c\013" +
    "\uff8c\015\uff8c\017\uff8c\021\uff8c\022\uff8c\023\uff8c\025\374" +
    "\030\uff8c\031\uff8c\032\uff8c\033\uff8c\037\uff8c\040\uff8c\042" +
    "\uff8c\044\uff8c\047\uff8c\050\uff8c\053\uff8c\054\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\063\uff8c\066\uff8c\070\uff8c\071\uff8c\073" +
    "\uff8c\075\uff8c\076\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c" +
    "\104\uff8c\105\uff8c\107\uff8c\001\002\000\116\004\uff8e\010" +
    "\uff8e\012\uff8e\013\uff8e\015\uff8e\017\uff8e\021\uff8e\022\uff8e" +
    "\023\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\037\uff8e\040" +
    "\uff8e\042\uff8e\044\uff8e\047\uff8e\050\uff8e\053\uff8e\054\uff8e" +
    "\057\uff8e\060\uff8e\061\uff8e\063\uff8e\066\uff8e\070\uff8e\071" +
    "\uff8e\073\uff8e\075\uff8e\076\uff8e\100\uff8e\101\uff8e\102\uff8e" +
    "\103\uff8e\104\uff8e\105\uff8e\107\uff8e\001\002\000\004\042" +
    "\342\001\002\000\116\004\uff8d\010\uff8d\012\uff8d\013\uff8d" +
    "\015\uff8d\017\uff8d\021\uff8d\022\uff8d\023\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\037\uff8d\040\uff8d\042\uff8d\044\uff8d" +
    "\047\uff8d\050\uff8d\053\uff8d\054\uff8d\057\uff8d\060\uff8d\061" +
    "\uff8d\063\uff8d\066\uff8d\070\uff8d\071\uff8d\073\uff8d\075\uff8d" +
    "\076\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\105" +
    "\uff8d\107\uff8d\001\002\000\004\044\377\001\002\000\012" +
    "\012\032\032\035\040\036\105\031\001\002\000\006\004" +
    "\u0101\107\uff97\001\002\000\004\107\uff98\001\002\000\004" +
    "\107\u0103\001\002\000\004\016\u0104\001\002\000\046\004" +
    "\073\017\102\031\067\044\075\047\066\050\076\053\063" +
    "\054\103\057\100\060\065\066\071\070\104\073\062\075" +
    "\054\102\101\103\064\104\046\107\072\001\002\000\004" +
    "\064\u0106\001\002\000\004\042\uff87\001\002\000\004\042" +
    "\342\001\002\000\116\004\uff86\010\uff86\012\uff86\013\uff86" +
    "\015\uff86\017\uff86\021\uff86\022\uff86\023\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\037\uff86\040\uff86\042\uff86\044\uff86" +
    "\047\uff86\050\uff86\053\uff86\054\uff86\057\uff86\060\uff86\061" +
    "\uff86\063\uff86\066\uff86\070\uff86\071\uff86\073\uff86\075\uff86" +
    "\076\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105" +
    "\uff86\107\uff86\001\002\000\116\004\uff85\010\uff85\012\uff85" +
    "\013\uff85\015\uff85\017\uff85\021\uff85\022\uff85\023\uff85\030" +
    "\uff85\031\uff85\032\uff85\033\uff85\037\uff85\040\uff85\042\uff85" +
    "\044\uff85\047\uff85\050\uff85\053\uff85\054\uff85\057\uff85\060" +
    "\uff85\061\uff85\063\uff85\066\uff85\070\uff85\071\uff85\073\uff85" +
    "\075\uff85\076\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104" +
    "\uff85\105\uff85\107\uff85\001\002\000\046\004\073\017\102" +
    "\031\067\044\075\047\066\050\076\053\063\054\103\057" +
    "\100\060\065\066\071\070\104\073\062\075\054\102\101" +
    "\103\064\104\046\107\072\001\002\000\004\064\u010c\001" +
    "\002\000\004\065\u010d\001\002\000\116\004\uff83\010\uff83" +
    "\012\uff83\013\uff83\015\uff83\017\uff83\021\uff83\022\uff83\023" +
    "\uff83\030\uff83\031\uff83\032\uff83\033\uff83\037\uff83\040\uff83" +
    "\042\uff83\044\uff83\047\uff83\050\uff83\053\uff83\054\uff83\057" +
    "\uff83\060\uff83\061\uff83\063\uff83\066\uff83\070\uff83\071\uff83" +
    "\073\uff83\075\uff83\076\uff83\100\uff83\101\uff83\102\uff83\103" +
    "\uff83\104\uff83\105\uff83\107\uff83\001\002\000\012\034\uffd7" +
    "\061\uffd7\074\uffd7\105\uffd7\001\002\000\116\004\uffa9\010" +
    "\uffa9\012\uffa9\013\uffa9\015\uffa9\017\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\037\uffa9\040" +
    "\uffa9\042\uffa9\044\uffa9\047\uffa9\050\uffa9\053\uffa9\054\uffa9" +
    "\057\uffa9\060\uffa9\061\uffa9\063\uffa9\066\uffa9\070\uffa9\071" +
    "\uffa9\073\uffa9\075\uffa9\076\uffa9\100\uffa9\101\uffa9\102\uffa9" +
    "\103\uffa9\104\uffa9\105\uffa9\107\uffa9\001\002\000\046\004" +
    "\073\017\102\031\067\044\075\047\066\050\076\053\063" +
    "\054\103\057\100\060\065\066\071\070\104\073\062\075" +
    "\054\102\101\103\064\104\046\107\072\001\002\000\004" +
    "\065\u0112\001\002\000\116\004\uff80\010\uff80\012\uff80\013" +
    "\uff80\015\uff80\017\uff80\021\uff80\022\uff80\023\uff80\030\uff80" +
    "\031\uff80\032\uff80\033\uff80\037\uff80\040\uff80\042\uff80\044" +
    "\uff80\047\uff80\050\uff80\053\uff80\054\uff80\057\uff80\060\uff80" +
    "\061\uff80\063\uff80\066\uff80\070\uff80\071\uff80\073\uff80\075" +
    "\uff80\076\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80" +
    "\105\uff80\107\uff80\001\002\000\116\004\uffad\010\uffad\012" +
    "\uffad\013\uffad\015\uffad\017\uffad\021\uffad\022\uffad\023\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\037\uffad\040\uffad\042" +
    "\uffad\044\uffad\047\uffad\050\uffad\053\uffad\054\uffad\057\uffad" +
    "\060\uffad\061\uffad\063\uffad\066\uffad\070\uffad\071\uffad\073" +
    "\uffad\075\uffad\076\uffad\100\uffad\101\uffad\102\uffad\103\uffad" +
    "\104\uffad\105\uffad\107\uffad\001\002\000\006\016\235\065" +
    "\uff93\001\002\000\004\065\u0116\001\002\000\116\004\uff39" +
    "\010\uff39\012\uff39\013\uff39\015\uff39\017\uff39\021\uff39\022" +
    "\uff39\023\uff39\030\uff39\031\uff39\032\uff39\033\uff39\037\uff39" +
    "\040\uff39\042\uff39\044\uff39\047\uff39\050\uff39\053\uff39\054" +
    "\uff39\057\uff39\060\uff39\061\uff39\063\uff39\066\uff39\070\uff39" +
    "\071\uff39\073\uff39\075\uff39\076\uff39\100\uff39\101\uff39\102" +
    "\uff39\103\uff39\104\uff39\105\uff39\107\uff39\001\002\000\116" +
    "\004\073\010\uffe7\012\uffe7\013\357\015\347\017\102\021" +
    "\uffe7\022\335\023\333\030\353\031\067\032\uffe7\033\361" +
    "\037\363\040\uffe7\042\342\044\075\047\066\050\076\053" +
    "\063\054\103\057\100\060\065\061\uffaf\063\337\066\071" +
    "\070\104\071\015\073\062\075\054\076\332\100\343\101" +
    "\334\102\101\103\064\104\046\105\uffe7\107\072\001\002" +
    "\000\004\061\uffb2\001\002\000\004\061\u011a\001\002\000" +
    "\120\004\uffb1\010\uffb1\012\uffb1\013\uffb1\015\uffb1\017\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\025\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\037\uffb1\040\uffb1\042\uffb1\044\uffb1\047\uffb1" +
    "\050\uffb1\053\uffb1\054\uffb1\057\uffb1\060\uffb1\061\uffb1\063" +
    "\uffb1\066\uffb1\070\uffb1\071\uffb1\073\uffb1\075\uffb1\076\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\107" +
    "\uffb1\001\002\000\004\065\u011d\001\002\000\116\004\uff82" +
    "\010\uff82\012\uff82\013\uff82\015\uff82\017\uff82\021\uff82\022" +
    "\uff82\023\uff82\030\uff82\031\uff82\032\uff82\033\uff82\037\uff82" +
    "\040\uff82\042\uff82\044\uff82\047\uff82\050\uff82\053\uff82\054" +
    "\uff82\057\uff82\060\uff82\061\uff82\063\uff82\066\uff82\070\uff82" +
    "\071\uff82\073\uff82\075\uff82\076\uff82\100\uff82\101\uff82\102" +
    "\uff82\103\uff82\104\uff82\105\uff82\107\uff82\001\002\000\116" +
    "\004\uff81\010\uff81\012\uff81\013\uff81\015\uff81\017\uff81\021" +
    "\uff81\022\uff81\023\uff81\030\uff81\031\uff81\032\uff81\033\uff81" +
    "\037\uff81\040\uff81\042\uff81\044\uff81\047\uff81\050\uff81\053" +
    "\uff81\054\uff81\057\uff81\060\uff81\061\uff81\063\uff81\066\uff81" +
    "\070\uff81\071\uff81\073\uff81\075\uff81\076\uff81\100\uff81\101" +
    "\uff81\102\uff81\103\uff81\104\uff81\105\uff81\107\uff81\001\002" +
    "\000\116\004\uff84\010\uff84\012\uff84\013\uff84\015\uff84\017" +
    "\uff84\021\uff84\022\uff84\023\uff84\030\uff84\031\uff84\032\uff84" +
    "\033\uff84\037\uff84\040\uff84\042\uff84\044\uff84\047\uff84\050" +
    "\uff84\053\uff84\054\uff84\057\uff84\060\uff84\061\uff84\063\uff84" +
    "\066\uff84\070\uff84\071\uff84\073\uff84\075\uff84\076\uff84\100" +
    "\uff84\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84\107\uff84" +
    "\001\002\000\004\065\u0120\001\002\000\116\004\uff38\010" +
    "\uff38\012\uff38\013\uff38\015\uff38\017\uff38\021\uff38\022\uff38" +
    "\023\uff38\030\uff38\031\uff38\032\uff38\033\uff38\037\uff38\040" +
    "\uff38\042\uff38\044\uff38\047\uff38\050\uff38\053\uff38\054\uff38" +
    "\057\uff38\060\uff38\061\uff38\063\uff38\066\uff38\070\uff38\071" +
    "\uff38\073\uff38\075\uff38\076\uff38\100\uff38\101\uff38\102\uff38" +
    "\103\uff38\104\uff38\105\uff38\107\uff38\001\002\000\050\004" +
    "\073\017\102\026\u0124\031\067\044\075\047\066\050\076" +
    "\053\063\054\103\057\100\060\065\066\071\070\104\073" +
    "\062\075\054\102\101\103\064\104\046\107\072\001\002" +
    "\000\006\056\u0126\065\u0127\001\002\000\006\056\uff7e\065" +
    "\uff7e\001\002\000\006\056\uff7b\065\uff7b\001\002\000\006" +
    "\056\uff7c\065\uff7c\001\002\000\050\004\073\017\102\026" +
    "\u0124\031\067\044\075\047\066\050\076\053\063\054\103" +
    "\057\100\060\065\066\071\070\104\073\062\075\054\102" +
    "\101\103\064\104\046\107\072\001\002\000\116\004\uff7f" +
    "\010\uff7f\012\uff7f\013\uff7f\015\uff7f\017\uff7f\021\uff7f\022" +
    "\uff7f\023\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\037\uff7f" +
    "\040\uff7f\042\uff7f\044\uff7f\047\uff7f\050\uff7f\053\uff7f\054" +
    "\uff7f\057\uff7f\060\uff7f\061\uff7f\063\uff7f\066\uff7f\070\uff7f" +
    "\071\uff7f\073\uff7f\075\uff7f\076\uff7f\100\uff7f\101\uff7f\102" +
    "\uff7f\103\uff7f\104\uff7f\105\uff7f\107\uff7f\001\002\000\006" +
    "\056\uff7d\065\uff7d\001\002\000\046\004\073\017\102\031" +
    "\067\044\075\047\066\050\076\053\063\054\103\057\100" +
    "\060\065\066\071\070\104\073\062\075\054\102\101\103" +
    "\064\104\046\107\072\001\002\000\004\042\uff8a\001\002" +
    "\000\004\042\342\001\002\000\116\004\uff89\010\uff89\012" +
    "\uff89\013\uff89\015\uff89\017\uff89\021\uff89\022\uff89\023\uff89" +
    "\030\uff89\031\uff89\032\uff89\033\uff89\037\uff89\040\uff89\042" +
    "\uff89\044\uff89\047\uff89\050\uff89\053\uff89\054\uff89\057\uff89" +
    "\060\uff89\061\uff89\063\uff89\066\uff89\070\uff89\071\uff89\073" +
    "\uff89\075\uff89\076\uff89\100\uff89\101\uff89\102\uff89\103\uff89" +
    "\104\uff89\105\uff89\107\uff89\001\002\000\012\012\032\032" +
    "\035\040\036\105\031\001\002\000\006\020\uff9a\064\uff9a" +
    "\001\002\000\004\107\u0130\001\002\000\010\020\uffb7\043" +
    "\131\064\uffb7\001\002\000\006\020\uff99\064\uff99\001\002" +
    "\000\004\044\uffd6\001\002\000\004\044\u0134\001\002\000" +
    "\004\064\u0135\001\002\000\004\042\u0136\001\002\000\116" +
    "\004\073\010\uffe7\012\uffe7\013\357\015\347\017\102\021" +
    "\uffe7\022\335\023\333\030\353\031\067\032\uffe7\033\361" +
    "\037\363\040\uffe7\042\342\044\075\047\066\050\076\053" +
    "\063\054\103\057\100\060\065\061\uffaf\063\337\066\071" +
    "\070\104\071\015\073\062\075\054\076\332\100\343\101" +
    "\334\102\101\103\064\104\046\105\uffe7\107\072\001\002" +
    "\000\004\061\u0138\001\002\000\012\034\uffd5\061\uffd5\074" +
    "\uffd5\105\uffd5\001\002\000\014\012\032\032\035\040\036" +
    "\077\u013c\105\031\001\002\000\006\004\uffbf\107\uffbf\001" +
    "\002\000\006\004\u0101\107\uff97\001\002\000\006\004\uffbe" +
    "\107\uffbe\001\002\000\004\107\u013e\001\002\000\004\044" +
    "\uffcf\001\002\000\004\044\u0140\001\002\000\014\012\032" +
    "\032\035\040\036\064\uff9c\105\031\001\002\000\004\064" +
    "\u0142\001\002\000\004\042\uffce\001\002\000\004\042\u0144" +
    "\001\002\000\116\004\073\010\uffe7\012\uffe7\013\357\015" +
    "\347\017\102\021\uffe7\022\335\023\333\030\353\031\067" +
    "\032\uffe7\033\361\037\363\040\uffe7\042\342\044\075\047" +
    "\066\050\076\053\063\054\103\057\100\060\065\061\uffaf" +
    "\063\337\066\071\070\104\071\015\073\062\075\054\076" +
    "\332\100\343\101\334\102\101\103\064\104\046\105\uffe7" +
    "\107\072\001\002\000\004\061\uffcd\001\002\000\004\061" +
    "\u0147\001\002\000\032\002\uffcc\010\uffcc\012\uffcc\021\uffcc" +
    "\032\uffcc\034\uffcc\040\uffcc\061\uffcc\071\uffcc\072\uffcc\105" +
    "\uffcc\106\uffcc\001\002\000\004\016\u014e\001\002\000\004" +
    "\107\u014a\001\002\000\006\043\131\065\uffb7\001\002\000" +
    "\004\065\ufff4\001\002\000\004\065\u014d\001\002\000\030" +
    "\002\ufff3\010\ufff3\012\ufff3\021\ufff3\032\ufff3\034\ufff3\040" +
    "\ufff3\071\ufff3\072\ufff3\105\ufff3\106\ufff3\001\002\000\014" +
    "\012\032\032\035\040\036\077\u013c\105\031\001\002\000" +
    "\004\107\u0150\001\002\000\004\044\uffcb\001\002\000\004" +
    "\044\u0152\001\002\000\014\012\032\032\035\040\036\064" +
    "\uff9c\105\031\001\002\000\004\064\u0154\001\002\000\004" +
    "\065\uffca\001\002\000\004\065\u0156\001\002\000\030\002" +
    "\uffc9\010\uffc9\012\uffc9\021\uffc9\032\uffc9\034\uffc9\040\uffc9" +
    "\071\uffc9\072\uffc9\105\uffc9\106\uffc9\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\006\003\003\123\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\015\007\016\010\005" +
    "\011\020\012\013\013\022\014\007\050\012\001\001\000" +
    "\002\001\001\000\006\076\025\077\u0148\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\076" +
    "\025\077\024\100\032\102\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\023\007\016\010\005\011\020\012\013\013\022" +
    "\014\007\050\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\051\117\112\260\113\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\117\113\116\001\001\000\004\076\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\036\076\046" +
    "\073\052\067\053\060\054\057\055\056\056\054\057\052" +
    "\060\050\061\046\062\044\063\043\064\042\065\051\066" +
    "\047\071\055\001\001\000\002\001\001\000\004\045\200" +
    "\001\001\000\004\044\173\001\001\000\002\001\001\000" +
    "\004\040\166\001\001\000\002\001\001\000\004\037\157" +
    "\001\001\000\004\046\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\202\001\001" +
    "\000\002\001\001\000\004\157\146\001\001\000\004\156" +
    "\142\001\001\000\002\001\001\000\014\036\076\046\073" +
    "\064\141\065\051\066\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\036" +
    "\076\046\073\064\122\065\051\066\047\001\001\000\014" +
    "\036\076\046\073\064\121\065\051\066\047\001\001\000" +
    "\050\036\076\046\073\052\111\053\060\054\057\055\056" +
    "\056\054\057\052\060\050\061\046\062\044\063\043\064" +
    "\042\065\051\066\047\076\025\077\024\100\107\102\110" +
    "\001\001\000\002\001\001\000\014\036\076\046\073\064" +
    "\106\065\051\066\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\036" +
    "\076\046\073\064\104\065\051\066\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\117\113\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\036\076\046\073\064\114\065" +
    "\051\066\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\036\076" +
    "\046\073\064\124\065\051\066\047\076\025\077\024\100" +
    "\125\101\126\102\127\001\001\000\002\001\001\000\006" +
    "\051\117\113\116\001\001\000\010\070\133\110\132\111" +
    "\131\001\001\000\002\001\001\000\042\036\076\046\073" +
    "\052\067\053\060\054\057\055\056\056\054\057\052\060" +
    "\050\061\046\062\044\063\043\064\042\065\051\066\047" +
    "\071\136\001\001\000\004\070\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\036\076\046\073" +
    "\054\145\055\056\056\054\057\052\060\050\061\046\062" +
    "\044\063\043\064\144\065\051\066\047\001\001\000\002" +
    "\001\001\000\004\157\146\001\001\000\002\001\001\000" +
    "\032\036\076\046\073\055\150\056\054\057\052\060\050" +
    "\061\046\062\044\063\043\064\144\065\051\066\047\001" +
    "\001\000\002\001\001\000\030\036\076\046\073\056\152" +
    "\057\052\060\050\061\046\062\044\063\043\064\144\065" +
    "\051\066\047\001\001\000\002\001\001\000\026\036\076" +
    "\046\073\057\154\060\050\061\046\062\044\063\043\064" +
    "\144\065\051\066\047\001\001\000\002\001\001\000\024" +
    "\036\076\046\073\060\156\061\046\062\044\063\043\064" +
    "\144\065\051\066\047\001\001\000\004\037\157\001\001" +
    "\000\022\036\076\046\073\061\162\062\044\063\043\064" +
    "\144\065\051\066\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\036\076\046\073" +
    "\062\170\063\043\064\144\065\051\066\047\001\001\000" +
    "\002\001\001\000\004\044\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\036\076\046\073\063\174\064" +
    "\144\065\051\066\047\001\001\000\004\045\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\036\076\046\073\064\201\065\051\066\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\036\076\046\073\052\221\053\060\054\057\055\056" +
    "\056\054\057\052\060\050\061\046\062\044\063\043\064" +
    "\042\065\051\066\047\001\001\000\044\036\076\046\073" +
    "\052\213\053\060\054\057\055\056\056\054\057\052\060" +
    "\050\061\046\062\044\063\043\064\042\065\051\066\047" +
    "\106\215\107\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\036\076\046\073\052\220\053\060" +
    "\054\057\055\056\056\054\057\052\060\050\061\046\062" +
    "\044\063\043\064\042\065\051\066\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\036" +
    "\076\046\073\052\224\053\060\054\057\055\056\056\054" +
    "\057\052\060\050\061\046\062\044\063\043\064\042\065" +
    "\051\066\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\036\076\046\073\052\067\053\060\054\057\055" +
    "\056\056\054\057\052\060\050\061\046\062\044\063\043" +
    "\064\042\065\051\066\047\071\227\001\001\000\004\130" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\070\133\110\233\111\131\001\001\000\006\120\235\121" +
    "\236\001\001\000\002\001\001\000\004\127\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\036\076\046\073\052\213\053\060\054\057\055\056" +
    "\056\054\057\052\060\050\061\046\062\044\063\043\064" +
    "\042\065\051\066\047\106\242\107\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\036" +
    "\076\046\073\052\246\053\060\054\057\055\056\056\054" +
    "\057\052\060\050\061\046\062\044\063\043\064\042\065" +
    "\051\066\047\001\001\000\004\126\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\070\133\110\252\111" +
    "\131\001\001\000\004\041\253\001\001\000\004\125\256" +
    "\001\001\000\040\036\076\046\073\052\255\053\060\054" +
    "\057\055\056\056\054\057\052\060\050\061\046\062\044" +
    "\063\043\064\042\065\051\066\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\120\001\001\000\002\001\001\000\004\132" +
    "\264\001\001\000\016\075\267\076\025\077\024\100\107" +
    "\102\266\114\265\001\001\000\026\015\300\072\301\073" +
    "\273\075\275\076\025\077\024\100\107\102\266\116\302" +
    "\117\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\070\133\110\271\111\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\135\316\001\001\000\010\015\315" +
    "\072\301\073\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\133\303\001\001\000\012\007\306\074\304" +
    "\115\305\122\307\001\001\000\002\001\001\000\006\007" +
    "\306\074\313\001\001\000\002\001\001\000\004\134\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\067\322\076\025\077" +
    "\024\100\125\101\320\102\127\104\323\105\321\001\001" +
    "\000\004\047\u012e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\136\325\001\001\000\002" +
    "\001\001\000\104\012\354\013\357\016\351\017\343\020" +
    "\355\021\345\022\347\024\353\025\340\026\364\027\361" +
    "\030\330\031\327\032\335\033\337\036\076\042\344\043" +
    "\363\046\073\050\012\052\350\053\060\054\057\055\056" +
    "\056\054\057\052\060\050\061\046\062\044\063\043\064" +
    "\042\065\051\066\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\152\u0128\001\001\000\002\001\001\000" +
    "\014\036\076\046\073\064\u011e\065\051\066\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\036\076\046" +
    "\073\052\u011a\053\060\054\057\055\056\056\054\057\052" +
    "\060\050\061\046\062\044\063\043\064\042\065\051\066" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\145\u0116\001\001\000\014\036\076\046\073\064\u0113\065" +
    "\051\066\047\001\001\000\100\012\354\013\357\020\u0112" +
    "\021\345\022\347\024\353\025\340\026\364\027\361\030" +
    "\330\031\327\032\335\033\337\036\076\042\344\043\363" +
    "\046\073\050\012\052\350\053\060\054\057\055\056\056" +
    "\054\057\052\060\050\061\046\062\044\063\043\064\042" +
    "\065\051\066\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\154\375\001\001\000\002\001\001\000" +
    "\004\147\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\036\076\046\073\052\366\053\060\054\057\055" +
    "\056\056\054\057\052\060\050\061\046\062\044\063\043" +
    "\064\042\065\051\066\047\001\001\000\004\150\367\001" +
    "\001\000\004\021\370\001\001\000\004\151\371\001\001" +
    "\000\004\023\372\001\001\000\002\001\001\000\004\021" +
    "\374\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\076\025\077\024\100\125\101\377\102\127\001\001\000" +
    "\004\047\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\036\076\046\073\052\u0104\053" +
    "\060\054\057\055\056\056\054\057\052\060\050\061\046" +
    "\062\044\063\043\064\042\065\051\066\047\001\001\000" +
    "\002\001\001\000\004\155\u0106\001\001\000\004\021\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\036" +
    "\076\046\073\052\u010a\053\060\054\057\055\056\056\054" +
    "\057\052\060\050\061\046\062\044\063\043\064\042\065" +
    "\051\066\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\036\076\046\073\064\u0110\065\051\066\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\120\u0114\121\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\012\354\013\357\016\u0117\017\343\020" +
    "\355\021\345\022\347\024\353\025\340\026\364\027\361" +
    "\030\330\031\327\032\335\033\337\036\076\042\344\043" +
    "\363\046\073\050\012\052\350\053\060\054\057\055\056" +
    "\056\054\057\052\060\050\061\046\062\044\063\043\064" +
    "\042\065\051\066\047\001\001\000\004\146\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\034\u0121\035\u0122\036" +
    "\076\046\073\052\u0124\053\060\054\057\055\056\056\054" +
    "\057\052\060\050\061\046\062\044\063\043\064\042\065" +
    "\051\066\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\035\u0127\036" +
    "\076\046\073\052\u0124\053\060\054\057\055\056\056\054" +
    "\057\052\060\050\061\046\062\044\063\043\064\042\065" +
    "\051\066\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\036\076\046\073\052\u0129\053\060\054\057\055" +
    "\056\056\054\057\052\060\050\061\046\062\044\063\043" +
    "\064\042\065\051\066\047\001\001\000\004\153\u012a\001" +
    "\001\000\004\021\u012b\001\001\000\002\001\001\000\016" +
    "\067\u012d\076\025\077\024\100\125\101\320\102\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\070\133" +
    "\110\u0130\111\131\001\001\000\002\001\001\000\004\137" +
    "\u0132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\012\354\013\357\016\u0136\017\343\020" +
    "\355\021\345\022\347\024\353\025\340\026\364\027\361" +
    "\030\330\031\327\032\335\033\337\036\076\042\344\043" +
    "\363\046\073\050\012\052\350\053\060\054\057\055\056" +
    "\056\054\057\052\060\050\061\046\062\044\063\043\064" +
    "\042\065\051\066\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\076\025\077\024\100\125\101\u0139\102" +
    "\127\103\u013a\001\001\000\002\001\001\000\004\047\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\140" +
    "\u013e\001\001\000\002\001\001\000\022\067\322\076\025" +
    "\077\024\100\125\101\320\102\127\104\u0140\105\321\001" +
    "\001\000\002\001\001\000\004\141\u0142\001\001\000\002" +
    "\001\001\000\104\012\354\013\357\016\u0144\017\343\020" +
    "\355\021\345\022\347\024\353\025\340\026\364\027\361" +
    "\030\330\031\327\032\335\033\337\036\076\042\344\043" +
    "\363\046\073\050\012\052\350\053\060\054\057\055\056" +
    "\056\054\057\052\060\050\061\046\062\044\063\043\064" +
    "\042\065\051\066\047\001\001\000\004\142\u0145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\070\133\110\u014a\111\131\001\001" +
    "\000\004\124\u014b\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\076\025\077\024\100\125\101\u0139\102\127" +
    "\103\u014e\001\001\000\002\001\001\000\004\143\u0150\001" +
    "\001\000\002\001\001\000\022\067\322\076\025\077\024" +
    "\100\125\101\320\102\127\104\u0152\105\321\001\001\000" +
    "\002\001\001\000\004\144\u0154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // UnarySign ::= T_MINUS 
            {
              Object RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // UnarySign ::= T_PLUS 
            {
              Object RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoDeleteStatement(_1);

                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NewStmt ::= T_NEW Designator OptCtorCall T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).setIsNew(true);
                        ((MyParser) parser).DoNewStatement(_1, _2);
                        ((MyParser) parser).setIsNew(false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("this", new StructType("this"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("nullptr", new NullPointerType("nullptr", 4));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        ConstSTO sto = new ConstSTO ("false", new BoolType(), 0);
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        ConstSTO sto = new ConstSTO ("true", new BoolType(), 1);
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO sto = new ConstSTO (_1);
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO sto = new ConstSTO (_1, new FloatType(), Float.parseFloat(_1));
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO sto = new ConstSTO (_1, new IntType(), Integer.parseInt(_1, 10));
                        sto.setIsAddressable(false);
                        RESULT = sto;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).isPre(false);

                        if(_2 == "++")
                        {
                          RESULT = ((MyParser) parser).DoUnaryExpr (_1, new IncOp());
                        }
                        else{
                          RESULT = ((MyParser) parser).DoUnaryExpr (_1, new DecOp());
                    }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoArrowCheck (_1, _2);;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Arrays (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      ((MyParser) parser).isPre(true);
                      if(_1 == "++")
                      {
                        RESULT = ((MyParser) parser).DoUnaryExpr (_2, new IncOp());
                      }
                      else{
                        RESULT = ((MyParser) parser).DoUnaryExpr (_2, new DecOp());
                      }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Designator ::= T_LPAREN DecoratedType T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoTypeCast (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator ::= T_SIZEOF T_LPAREN Type OptArrayList T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeCheck (_2, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeCheck (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr (_1, new NotOp());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(_2 == "-")
                            RESULT = ((MyParser) parser).DoUnaryExpr (_1, new MinusUnaryOp());
                        else
                            RESULT = ((MyParser) parser).DoUnaryExpr (_1, new PlusUnaryOp());

                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAmpersand (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoStarCheck (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "--";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "++";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // MulOp ::= T_MOD 
            {
              String RESULT = null;
		
                        RESULT = "%";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // MulOp ::= T_SLASH 
            {
              String RESULT = null;
		
                        RESULT = "/";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // MulOp ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AddOp ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(34/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AddOp ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(34/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Relation ::= T_GTE 
            {
              Object RESULT = null;
		
                        RESULT = ">=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Relation ::= T_LTE 
            {
              Object RESULT = null;
		
                        RESULT = "<=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Relation ::= T_GT 
            {
              Object RESULT = null;
		
                        RESULT = ">";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Relation ::= T_LT 
            {
              Object RESULT = null;
		
                        RESULT = "<";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Equality ::= T_NEQ 
            {
              Object RESULT = null;
		
                        RESULT = "!=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Equality ::= T_EQU 
            {
              Object RESULT = null;
		
                        RESULT = "==";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).doOffsetCheck(_1);
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      if(_2 == "*")
                      {
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new StarOp(), _3);
                      }
                      else if(_2 == "%"){
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new ModOp(), _3);
                      }
                      else{
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new SlashOp(), _3);
                      }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      if(_2 == "+"){
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AddOp(), _3);
                      }
                      else{
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new MinusOp(), _3);
                      }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      if(_2 == "<")
                      {
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new LessThanOp(), _3);
                      }
                      else if(_2 == "<="){
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new LessThanEqualOp(), _3);
                      }
                      else if(_2 == ">"){
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new GreaterThanOp(), _3);
                      }
                      else{
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new GreaterThanEqualOp(), _3);
                      }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      if(_2 == "==")
                      {
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new EqualOp(), _3);
                      }
                      else{
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new NotEqualOp(), _3);
                      }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AmpersandOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new CaretOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BarOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr1 ::= Expr1 NT$28 T_AND Expr2 
            {
              STO RESULT = null;
              // propagate RESULT from NT$28
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).DoShortCircuitRight (_3, "and");

                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AndOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$28 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoShortCircuitLeft (_1, "and");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(109/*NT$28*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Expr0 ::= Expr0 NT$27 T_OR Expr1 
            {
              STO RESULT = null;
              // propagate RESULT from NT$27
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).DoShortCircuitRight (_3, "or");

                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new OrOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$27 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoShortCircuitLeft (_1, "or");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(108/*NT$27*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OptExprList ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoEndlCout();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(27/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // WritePair ::= Expr 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).DoCout(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(27/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // WritePairList ::= WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoCin(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(24/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoReturnCheck(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;
		
                        RESULT = ((MyParser) parser).DoReturnCheck();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = ((MyParser) parser).DoExitCheck(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoContinueCheck();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoBreakCheck();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(20/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ForeachStmt ::= T_FOREACH NT$25 T_LPAREN Type OptRef T_ID T_COLON Expr T_RPAREN NT$26 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$25
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
              // propagate RESULT from NT$26
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).popStack("foreach");
                        ((MyParser) parser).decrementBreakCounter();
                        ((MyParser) parser).DoBlockClose();
                        ((MyParser) parser).writeEndWhileLoop();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$26 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).incrementBreakCounter();
                        ((MyParser) parser).DoForEachVarDecl (_2, _1, _3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(107/*NT$26*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$25 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).pushStack("foreach");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(106/*NT$25*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // WhileStmt ::= T_WHILE NT$23 Expr NT$24 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$23
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$24
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).popStack("while");
                        ((MyParser) parser).decrementBreakCounter();
                        ((MyParser) parser).writeEndWhileLoop();

                    
              CUP$parser$result = new java_cup.runtime.Symbol(19/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$24 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).incrementBreakCounter();
                        RESULT = ((MyParser) parser).DoBoolCheck(_1);
                        ((MyParser) parser).writeWhileLoopCondition(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(105/*NT$24*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$23 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).pushStack("while");
                        ((MyParser) parser).writeWhile();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(104/*NT$23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IfStmt ::= T_IF NT$20 Expr NT$21 CodeBlock NT$22 OptElse 
            {
              Object RESULT = null;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                        ((MyParser) parser).writeEndOfIf();
                        ((MyParser) parser).popStack("if");

                    
              CUP$parser$result = new java_cup.runtime.Symbol(16/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$22 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        ((MyParser) parser).writeElseBlock();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(103/*NT$22*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$21 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        RESULT = ((MyParser) parser).DoBoolCheck(_1);
                        ((MyParser) parser).writeIf(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(102/*NT$21*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$20 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).pushStack("if");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(101/*NT$20*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CtorCall ::= T_COLON T_LPAREN OptExprList T_RPAREN 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*CtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptCtorCall ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptCtorCall ::= CtorCall 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OptInit ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OptInit ::= T_ASSIGN Expr 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OptRef ::= 
            {
              String RESULT = null;
		
                        RESULT = "";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OptRef ::= T_AMPERSAND 
            {
              String RESULT = null;
		
                        RESULT = "&";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ParamDecl ::= Type OptRef T_ID OptArrayList 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        VarSTO temp;
                        if(_4 == null)
                        {
                            temp = new VarSTO(_3, _1);
                        }
                        else
                        {
                            temp = ((MyParser) parser).DoDeclArray(_3, _1, _4);
                        }

                        if(_2 == "&"){
                            ((VarSTO)temp).setPbr(true);
                        }
                        else{
                            ((VarSTO)temp).setPbr(false);
                        }

                        RESULT = temp;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OptParamList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(66/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= ForeachStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StmtList ::= StmtList Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StmtList ::= Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OptStmtList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OptStmtList ::= StmtList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CodeBlock ::= T_LBRACE NT$18 OptStmtList NT$19 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$19 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockClose(); 
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$18 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Array ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ArrayList ::= ArrayList Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ArrayList ::= Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptArrayList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptArrayList ::= ArrayList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Pointer ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PointerList ::= PointerList Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PointerList ::= Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OptPointerList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OptPointerList ::= PointerList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
                        RESULT = new VoidType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnType ::= Type 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StructType ::= T_ID_U 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*StructType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
                        RESULT = new BoolType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
                        RESULT = new FloatType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
                        RESULT = new IntType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DecoratedBasicType ::= BasicType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(_2 == null)
                        {
                            RESULT = _1;    // gotta do something here!
                        }
                        else
                        {
                            RESULT = ((MyParser) parser).DoPointerType (_1, _2);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*DecoratedBasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DecoratedType ::= StructType PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(_2 == null)
                        {
                            RESULT = _1;    // gotta do something here!
                        }
                        else
                        {
                            RESULT = ((MyParser) parser).DoPointerType (_1, _2);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DecoratedType ::= DecoratedBasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= StructType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= DecoratedType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$16 T_LPAREN OptParamList T_RPAREN NT$17 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$17 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).DoFuncDecl_2(_3, _4);
                        ((MyParser) parser).setExtern(false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$16 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).setExtern(true);
                        ((MyParser) parser).DoFuncDecl_1(_3, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$13 T_LPAREN OptParamList T_RPAREN NT$14 T_LBRACE OptStmtList NT$15 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$15 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

                        ((MyParser) parser).DoFuncDecl_2(_3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$14 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).writeFuncDecl(_3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3, _1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FieldFuncDecl ::= FuncDef 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(58/*FieldFuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FieldFuncsList ::= FieldFuncsList FieldFuncDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (((MyParser) parser).getStruct());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FieldFuncsList ::= FieldFuncDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(((MyParser) parser).getStruct());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptFieldFuncsList ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptFieldFuncsList ::= FieldFuncsList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                           RESULT = _1;
                      
              CUP$parser$result = new java_cup.runtime.Symbol(80/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DtorDef ::= T_TILDE T_ID_U NT$12 T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoFuncDecl_2("~" + _3, new Vector());
                        RESULT = ((MyParser) parser).DoCtorDtorCheck();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*DtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$12 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1("~" + _3);
                        ((MyParser) parser).DoFormalParams(new Vector());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CtorDef ::= T_ID_U NT$10 T_LPAREN OptParamList T_RPAREN NT$11 T_LBRACE OptStmtList T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoFuncDecl_2(_3, _4);
                        RESULT = ((MyParser) parser).DoCtorDtorCheck();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*CtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CtorDtorDecl ::= DtorDef 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CtorDtorDecl ::= CtorDef 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CtorDtorList ::= CtorDtorList CtorDtorDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CtorDtorList ::= CtorDtorDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptCtorDtorList ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptCtorDtorList ::= CtorDtorList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FieldVarDecl ::= DecoratedType T_ID OptArrayList T_SEMI 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        VarSTO temp = ((MyParser) parser).VarTypeDec(_1, _3, _4);
                        ((MyParser) parser).DoDuplicateVarCheck(temp);
                        RESULT = temp;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*FieldVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldVarsList ::= FieldVarsList FieldVarDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FieldVarsList ::= FieldVarDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StructdefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$7 FieldVarsList OptCtorDtorList NT$8 OptFieldFuncsList NT$9 T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*StructdefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoBlockClose();
                        ((MyParser) parser).setRecursiveFuncFalse();
                        ((MyParser) parser).ResetStruct();
                        ((MyParser) parser).DoStructdefDecl (_1, _2, _4, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$8 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        // Put logic here to create default ctor if needed
                        _3 = ((MyParser) parser).CtorCheck(_3, _1);
                        ((MyParser) parser).setRecursiveFuncTrue();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).SetStructFlagAndLoad(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OptStatic ::= 
            {
              String RESULT = null;
		
                        RESULT = "NOTSTATIC";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OptStatic ::= T_STATIC 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = "STATIC";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ConstDecl ::= OptStatic T_CONST T_AUTO T_ID T_ASSIGN ConstExpr NT$6 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if(_1 == "STATIC"){
                            ((MyParser) parser).isStatic(true);
                        }
                        else{
                            ((MyParser) parser).isStatic(false);
                        }
                        ((MyParser) parser).DoAutoConstDecl (_3, (STO) _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ConstDecl ::= OptStatic T_CONST BasicType T_ID T_ASSIGN ConstExpr NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if(_1 == "STATIC"){
                            ((MyParser) parser).isStatic(true);
                        }
                        else{
                            ((MyParser) parser).isStatic(false);
                        }

                        ((MyParser) parser).DoConstDecl (_3, _2, (STO) _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= OptStatic StructType T_ID OptArrayList OptCtorCall NT$4 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoVarDecl (_3, _2, _4,  _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= OptStatic T_AUTO T_ID T_ASSIGN Expr NT$3 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if(_1 == "STATIC"){
                            ((MyParser) parser).isStatic(true);
                        }
                        else{
                            ((MyParser) parser).isStatic(false);
                        }
                        ((MyParser) parser).DoAutoDecl ( _3, (STO) _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= OptStatic DecoratedType T_ID OptArrayList OptInit NT$2 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        if(_1 == "STATIC"){
                            ((MyParser) parser).isStatic(true);
                        }
                        else{
                            ((MyParser) parser).isStatic(false);
                        }
                        ((MyParser) parser).DoVarDecl (_3, _2, (STO) _5, _4, "");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExternDecl ::= T_EXTERN DecoratedBasicType T_ID OptArrayList NT$1 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoExternDecl (_3, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= StructdefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

